
options {
  IGNORE_CASE = true;
  //FORCE_LA_CHECK = true;
  LOOKAHEAD = 3;
  //DEBUG_PARSER = true;
  //DEBUG_LOOKAHEAD = true;
  OUTPUT_DIRECTORY = "../generated";
  STATIC = false;
}


PARSER_BEGIN(Pl1Parser)
package org.bachelor.transpiler.pl1transpiler.generated;

import java.util.ArrayList;


public class Pl1Parser {

	private String value;
	private String letter;
	private ArrayList<String> length = new ArrayList<String>();
	private int charLength;
	private String number;
	private String stringLength;
	private String pictureAttribiute;


	public String getValue() {
		return this.value;
	}

	public String getPictureAttirbute() {
		return this.pictureAttribiute;
	}

	public String getLength(int i) {
	return length.get(i);
	}	
	
	public Pl1Parser() {
	}

}

PARSER_END(Pl1Parser)

////////////////////////////////////////////////////////////////////////////////
// Lexical structure
////////////////////////////////////////////////////////////////////////////////


TOKEN :
{
  	
 	 < DCL : "DCL" >
	| < DECLARE : "DECLARE" >
	| < DECIMAL : "DECIMAL" >
	| < BINARY : "BINARY" >
	| < DEC : "DEC" >
	| < BIN : "BIN" >
	| < FIXED : "FIXED" >
	| < FLOAT : "FLOAT" >
	| < CHARACTER : "CHARACTER" >
	| < CHAR : "CHAR" >
	| < STATIC : "STATIC" >
	| < INIT : "INIT" >
	| < PTR : "PTR" >
	| < REAL : "REAL" >
	| < VARYING : "VARYING" >
	| < PIC : "PIC" >
	| < PICTURE : "PICTURE" >
	| < COMPLEX : "COMPLEX" >
	| < UNSIGNED : "UNSIGNED" >
	| < SIGNED : "SIGNED" >
	| < AREA : "AREA" >
	| < DIMENSION : "DIMENSION" >
	| < ENTRY : "ENTRY" >
	| < FILE : "FILE" >
	| < FORMAT : "FORMAT" >
	| < GRAPHIC : "GRAPHIC" >
	| < HANDLE : "HANDLE" >
	| < LABEL : "LABEL" >
	| < LOCATES : "LOCATES" >
	| < NONVARYING : "NONVARYING" >
	| < OFFSET : "OFFSET" >
	| < ORDINAL : "ORDINAL" >
	| < POINTER : "POINTER" >
	| < PRECISION : "PRECISION" >
	| < RETURNS : "RETURNS" >
	| < STRUCTURE : "STRUCTURE" >
	| < TASK : "TASK" >
	| < TYPE : "TYPE" >
	| < UNION : "UNION" >
	| < VARYING4 : "VARYING4" >
	| < VARYINGZ : "VARYINGZ" >
	| < WIDECHAR : "WIDECHAR" >
	| < WIDEPIC : "WIDEPIC" >
	| < ABNORMAL : "ABNORMAL" >
	| < ALIGNED : "ALIGNED" >
	| < ASSIGNABLE : "ASSIGNABLE" >
	| < AUTOMATIC : "AUTOMATIC" >
	| < BASED : "BASED" >
	| < BIGENDIAN : "BIGENDIAN" >
	| < BUFFERED : "BUFFERED" >
	| < BUILTIN : "BUILTIN" >
	| < BYADDR : "BYADDR" >
	| < BYVALUE : "BYVALUE" >
	| < CONDITION : "CONDITION" >
	| < CONNECTED : "CONNECTED" >
	| < CONTROLLED : "CONTROLLED" >
	| < DEFINED : "DEFINED" >
	| < DIMACROSS : "DIMACROSS" >
	| < DIRECT : "DIRECT" >
	| < ENVIRONMENT : "ENVIRONMENT" >
	| < EXCLUSIVE : "EXCLUSIVE" >
	| < EXTERNAL : "EXTERNAL" >
	| < GENERIC : "GENERIC" >
	| < HEXADEC : "HEXADEC" >
	| < IEEE : "IEEE" >
	| < INDFOR : "INDFOR" >
	| < INITIAL : "INITIAL" >
	| < INONLY : "INONLY" >
	| < INOUT : "INOUT" >
	| < INPUT : "INPUT" >
	| < INTERMAL : "INTERMAL" >
	| < KEYED : "KEYED" >
	| < LIKE : "LIKE" >
	| < LIST : "LIST" >
	| < LITTLEENDIAN : "LITTLEENDIAN" >
	| < NONASSIGNABLE : "NONASSIGNABLE" >
	| < NONCONNECTED : "NONCONNECTED" >
	| < NORMAL : "NORMAL" >
	| < OPTIONAL : "OPTIONAL" >
	| < OPTIONS : "OPTIONS" >
	| < OUTONLY : "OUTONLY" >
	| < OUTPUT : "OUTPUT" >
	| < PARAMETER : "PARAMETER" >
	| < POSITION : "POSITION" >
	| < PRINT : "PRINT" >
	| < RECORD : "RECORD" >
	| < SEQUENTIAL : "SEQUENTIAL" >
	| < STREAM : "STREAM" >
	| < UNALIGNED : "UNALIGNED" >
	| < UNBUFFERED : "UNBUFFERED" >
	| < UPDATE : "UPDATE" >
	| < VALUE : "VALUE" >
	| < VARIABLE : "VARIABLE" >
	| < XMLATTR : "XMLATTR" >
	| < XMLOMIT : "XMLOMIT" >
	| < BIT : "BIT" >
	| < X : ("X")+ >
	| < A : ("A")+ >
	| < V : ("V")+ >
	| < INTEGER : (["0"-"9"])+ >
 	| < PL1_WORD: (["a"-"z","A"-"Z","0"-"9"])+ ((<MINUSCHAR> | "_" )+ (["a"-"z","0"-"9"])+ )* >
	| < EOL: "\n" >
	| < SPACE_SEPARATOR : ( <SPACECHAR> | <EOL> )+ >
	| < SPACECHAR: ( " " | "\t" | "\f" | ";" | "\r" | "&" )+ >
	| < SCOPE : (["1"-"9"]) >
	| < MINUSCHAR: "-" >
	| < PREPROC_COMMENT: "*|" (~["\n","\r"])* >
	| < SCOL  : ";" >
	| < COMMA_SEPARATOR : <SPACE_SEPARATOR> "," <SPACE_SEPARATOR> >
	| < COMMENT: "/*" (~["*"])* "*" (~["/"])* "*/" >
}


/**
* Grammar Expression for a complete PL/I Programm.
**/
SimpleNode program() #PROGRAM :
{}
{
  (([< SPACE_SEPARATOR >])var_declaration()< SPACE_SEPARATOR > )*  {return jjtThis;}
}

/**
* Grammar Expression for a Variable declaration.
**/
void var_declaration() #VAR :
{int scope = 0; Token t;}
{	  ( < DCL > | < DECLARE > ) 
	  ( < SPACE_SEPARATOR > scope = scope() 
	  | < SPACE_SEPARATOR > )
 	   id() (< SPACE_SEPARATOR > type()| 
 	   < SPACE_SEPARATOR > type() < COMMA_SEPARATOR > |
      ( < COMMA_SEPARATOR > minor(scope))*) | minor(scope)
}

/**
* Grammar Expression for a nested Variable Declaration.
**/
void minor(int parentScope) #MINOR :
{int scope = 0;}
{
 
		   ( scope = scope() | < SPACE_SEPARATOR > )
		      
  id() ( < SPACE_SEPARATOR > type() | < SPACE_SEPARATOR > type() < COMMA_SEPARATOR > |
      ( < COMMA_SEPARATOR > minor(scope))* ) 

      
}

/**
* @return scope of the Variable
**/
int scope() #SCOPE:
{Token t; }
{
	t = < INTEGER > < SPACE_SEPARATOR > { return Integer.parseInt(t.image); }
}

/**
* Datatype of the Variabledeclaration.
**/
void type() #TYPE :
{}
{
	(	  codedArithmetic() | String() | Locator() | Picture() | File() | Entry()
	) 
}

/**
* Grammar Expression for Entry.
**/
void Entry() #Entry :
{}
{
  < ENTRY > [< RETURNS >]
}

/**
* Grammar Expression for a File reader.
**/
void File() #File :
{}
{
  < FILE > < SPACE_SEPARATOR > < ENVIRONMENT > < SPACE_SEPARATOR >
  ( Stream() | Record()) (Input() | Output() | Update())
  (Sequential() | Direct()) (Buffered() | Unbuffered()) < SPACE_SEPARATOR > < KEYED > < SPACE_SEPARATOR > < PRINT >
}

void Stream() #Stream :
{}
{
  < SPACE_SEPARATOR > < STREAM >
}

void Record() #Record :
{}
{
  < SPACE_SEPARATOR > < RECORD >
}

void Input() #Input :
{}
{
  < SPACE_SEPARATOR > < INPUT >
}

void Output() #Output :
{}
{
  < SPACE_SEPARATOR > < OUTPUT >
}

void Update() #Update :
{}
{
  < SPACE_SEPARATOR > <UPDATE >
}

void Sequential() #Sequential :
{}
{
  < SPACE_SEPARATOR > <SEQUENTIAL >
}

void Direct() #Direct :
{}
{
  < SPACE_SEPARATOR > < DIRECT >
}

void Buffered() #Buffered :
{}
{
  < SPACE_SEPARATOR > < BUFFERED >
}

void Unbuffered() #Unbuffered :
{}
{
  < SPACE_SEPARATOR > < UNBUFFERED >
}

/**
* Grammar Expression for a Picture Expression.
**/
String Picture() #PictureExpression :
{ String t; }
{
  (Pic() | Widepic()) [Real() | Complex() ] t = PictureAttribute() [< SPACE_SEPARATOR > < VALUE > ]
  { return pictureAttribiute = t; }
}

void Pic() #Picture :
{}
{
  ( < PIC > | < PICTURE > )
}

void Widepic() #Widepic :
{}
{
  < WIDEPIC >
}

String PictureAttribute() #PictureAttribute:
{
 String t1 = "";
 String t11 = "";
 
 String t2 = "";
 String t22 = "";
 String t222 = "";
 String t2222 = "";
 
 String t3 = "";
 String t33 = "";
 String t333 = "";

 String t4 = "";

 String t5 = "";
 String t55 = "";
 }
{
  < SPACE_SEPARATOR >
  "'" (
	t1 = LengthPicture() (t11 = LetterPicture() | t11 = NumberPicture() ) |
	t2 = LetterPicture() ( t22 = NumberPicture() ( t222 = NumberPicture())*)? t2222 = LetterPicture()
	|	t3 = NumberPicture() t33 = LetterPicture() t333 = NumberPicture() |
	t4 = LetterPicture() |
	(t5 = NumberPicture() ( t55 = NumberPicture())*)?
     )"'"
     { if(t1 != "") return t1 + t11;
     	if(t2 != "") return t2 + t22 + t222 + t2222;
     	if(t3 != "") return t3 + t33 + t333;
     	if(t4 != "") return t4;
     	if(t5 != "") return t5 + t55;
     	 }
}

//| < PIC_REGEX : ("("["0"-"9"]")")?((["0"-"9","X"])+ |(["0"-"9","A"])+ |(["X","0"-"9"])+ )((["A"-"Z","0"-"9"])*) >

String LetterPicture() #PictureLetter :
{Token t;}
{
  ( t = < X > | t = < A > | t = < V >)
  {return t.toString();}
}

String NumberPicture() #Number :
{Token t;}
{
  t = < INTEGER >
  {return t.toString();}
}


String LengthPicture() #PictureLength:
{Token t;
 Token t1;
 Token t2;} 
{
  t = "(" t1 = < INTEGER > t2 = ")"
  {return t.toString() + t1.toString() + t2.toString(); }
}

/**
* Grammar Expression for a Dynamic allocated Datatype.
**/
void Locator() #Locator:
{}
{
	(Pointer() | Offset() | Handle()) < SPACE_SEPARATOR > < VALUE > < SPACE_SEPARATOR > < LOCATES >
}

void Pointer() #Pointer:
{}
{
  < SPACE_SEPARATOR > < POINTER >
}

void Offset() #Offset:
{}
{
  < SPACE_SEPARATOR > < OFFSET >
}

void Handle() #Handle:
{}
{
  < SPACE_SEPARATOR > < HANDLE >
}

/**
* Grammar Expression for a String Expression.
**/
void String() #String:
{}
{
  ( Char() | Bit() | Graphic() | Widechar()) (StringAttribute() | < SPACE_SEPARATOR > StringAttribute() ) [< SPACE_SEPARATOR > < NONVARYING >] [< SPACE_SEPARATOR > < VALUE >]
}

void Widechar() #Widechar:
{}
{
  < WIDECHAR >
}

void Graphic() #Graphic:
{}
{
   < GRAPHIC >
}

void Char() #Char:
{}
 {
	(< CHAR > | < CHARACTER >)
 }

void Bit() #Bit:
{}
{
  < BIT >
}

/**
* Grammar Expression for a Arithmetic Datatype.
**/
void codedArithmetic() #Arithmetic:
{}
{
  [ Real()  < SPACE_SEPARATOR >| Complex()  < SPACE_SEPARATOR >]
  [ Float()  < SPACE_SEPARATOR >| Fixed()  < SPACE_SEPARATOR >]
  ( Binary() | Decimal() ) (size()) [Signed() | Unsigned() ]
}

void Signed() #Signed:
{}
{
  < SPACE_SEPARATOR > < SIGNED >
}

void Unsigned() #Unsigned:
{}
{
  < SPACE_SEPARATOR > < UNSIGNED >
}

void Decimal() #Decimal:
{}
{
   < DECIMAL > 
}

void Fixed() #Fixed:
{}
{
	< FIXED >
}

void Float() #Float:
{}
{
	< FLOAT >
}


void Binary() #Binary:
{}
{
	( < BINARY > | < BIN > )	  
}

void size():
{}
{
  [< PRECISION >] < SPACE_SEPARATOR > (attributes() | attribute())
}

void StringAttribute() #Length:
{Token t;}
{
	("(" t = < INTEGER > ")")
	{this.length.add(t.toString());}
}

void attribute() #Int:
{ Token p;}
{
	("(" p = < INTEGER > ")")
	{this.length.add(p.toString());}
}

void attributes () #Double:
{Token p;
Token q;}
{
	("(" p = < INTEGER > "," q = <  INTEGER > ")")
	{this.length.add(p + "," + q);}

}


void Real() #Real:
{}
{  
	< REAL >
}

void Complex() #Complex:
{}
{
  < COMPLEX >
}
  
/**
* Grammar Expression for a  Identifer.
**/
void id() #Id :
{Token t;}
{
  t=<PL1_WORD> {jjtThis.value = t.image;}
}

