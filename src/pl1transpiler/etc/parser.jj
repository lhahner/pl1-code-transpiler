/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. parser.jj */
/*@egen*/
options {
  IGNORE_CASE = true;
  //FORCE_LA_CHECK = true;
  LOOKAHEAD = 3;
  //DEBUG_PARSER = true;
  //DEBUG_LOOKAHEAD = true;
  STATIC = false;
}



PARSER_BEGIN(Pl1Parser)
package pl1transpiler.Pl1Parser;

public class Pl1Parser/*@bgen(jjtree)*/implements Pl1ParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTPl1ParserState jjtree = new JJTPl1ParserState();

/*@egen*/

	private String value;
	private String letter;
	private String length;
	private String number;
	private String stringLength;

	public String getValue() {
	
		return this.value;
	}

	public String getPictureAttirbute() {
		return this.value;
	}

	

	public Pl1Parser() {
	}

	
  
}

PARSER_END(Pl1Parser)

////////////////////////////////////////////////////////////////////////////////
// Lexical structure
////////////////////////////////////////////////////////////////////////////////


TOKEN :
{
  	
 	 < DCL : "DCL" >
	| < DECLARE : "DECLARE" >
	| < DECIMAL : "DECIMAL" >
	| < BINARY : "BINARY" >
	| < DEC : "DEC" >
	| < BIN : "BIN" >
	| < FIXED : "FIXED" >
	| < FLOAT : "FLOAT" >
	| < CHARACTER : "CHARACTER" >
	| < CHAR : "CHAR" >
	| < STATIC : "STATIC" >
	| < INIT : "INIT" >
	| < PTR : "PTR" >
	| < REAL : "REAL" >
	| < VARYING : "VARYING" >
	| < PIC : "PIC" >
	| < PICTURE : "PICTURE" >
	| < COMPLEX : "COMPLEX" >
	| < UNSIGNED : "UNSIGNED" >
	| < SIGNED : "SIGNED" >
	| < AREA : "AREA" >
	| < DIMENSION : "DIMENSION" >
	| < ENTRY : "ENTRY" >
	| < FILE : "FILE" >
	| < FORMAT : "FORMAT" >
	| < GRAPHIC : "GRAPHIC" >
	| < HANDLE : "HANDLE" >
	| < LABEL : "LABEL" >
	| < LOCATES : "LOCATES" >
	| < NONVARYING : "NONVARYING" >
	| < OFFSET : "OFFSET" >
	| < ORDINAL : "ORDINAL" >
	| < POINTER : "POINTER" >
	| < PRECISION : "PRECISION" >
	| < RETURNS : "RETURNS" >
	| < STRUCTURE : "STRUCTURE" >
	| < TASK : "TASK" >
	| < TYPE : "TYPE" >
	| < UNION : "UNION" >
	| < VARYING4 : "VARYING4" >
	| < VARYINGZ : "VARYINGZ" >
	| < WIDECHAR : "WIDECHAR" >
	| < WIDEPIC : "WIDEPIC" >
	| < ABNORMAL : "ABNORMAL" >
	| < ALIGNED : "ALIGNED" >
	| < ASSIGNABLE : "ASSIGNABLE" >
	| < AUTOMATIC : "AUTOMATIC" >
	| < BASED : "BASED" >
	| < BIGENDIAN : "BIGENDIAN" >
	| < BUFFERED : "BUFFERED" >
	| < BUILTIN : "BUILTIN" >
	| < BYADDR : "BYADDR" >
	| < BYVALUE : "BYVALUE" >
	| < CONDITION : "CONDITION" >
	| < CONNECTED : "CONNECTED" >
	| < CONTROLLED : "CONTROLLED" >
	| < DEFINED : "DEFINED" >
	| < DIMACROSS : "DIMACROSS" >
	| < DIRECT : "DIRECT" >
	| < ENVIRONMENT : "ENVIRONMENT" >
	| < EXCLUSIVE : "EXCLUSIVE" >
	| < EXTERNAL : "EXTERNAL" >
	| < GENERIC : "GENERIC" >
	| < HEXADEC : "HEXADEC" >
	| < IEEE : "IEEE" >
	| < INDFOR : "INDFOR" >
	| < INITIAL : "INITIAL" >
	| < INONLY : "INONLY" >
	| < INOUT : "INOUT" >
	| < INPUT : "INPUT" >
	| < INTERMAL : "INTERMAL" >
	| < KEYED : "KEYED" >
	| < LIKE : "LIKE" >
	| < LIST : "LIST" >
	| < LITTLEENDIAN : "LITTLEENDIAN" >
	| < NONASSIGNABLE : "NONASSIGNABLE" >
	| < NONCONNECTED : "NONCONNECTED" >
	| < NORMAL : "NORMAL" >
	| < OPTIONAL : "OPTIONAL" >
	| < OPTIONS : "OPTIONS" >
	| < OUTONLY : "OUTONLY" >
	| < OUTPUT : "OUTPUT" >
	| < PARAMETER : "PARAMETER" >
	| < POSITION : "POSITION" >
	| < PRINT : "PRINT" >
	| < RECORD : "RECORD" >
	| < SEQUENTIAL : "SEQUENTIAL" >
	| < STREAM : "STREAM" >
	| < UNALIGNED : "UNALIGNED" >
	| < UNBUFFERED : "UNBUFFERED" >
	| < UPDATE : "UPDATE" >
	| < VALUE : "VALUE" >
	| < VARIABLE : "VARIABLE" >
	| < XMLATTR : "XMLATTR" >
	| < XMLOMIT : "XMLOMIT" >
	| < BIT : "BIT" >
	| < X : ("X")* >
	| < A : ("A")* >
	| < V : ("V")* >
	| < INTEGER : (["0"-"9"])* >
 	| < PL1_WORD: (["a"-"z","A"-"Z","0"-"9"])+ ((<MINUSCHAR> | "_" )+ (["a"-"z"])+ )* >
	| < EOL: "\n" >
	| < SPACE_SEPARATOR : ( <SPACECHAR> | <EOL> )+ >
	| < SPACECHAR: ( " " | "\t" | "\f" | ";" | "\r" | "&" )+ >
	| < SCOPE : (["1"-"9"]) >
	| < MINUSCHAR: "-" >
	| < PREPROC_COMMENT: "*|" (~["\n","\r"])* >
	| < SCOL  : ";" >
	| < COMMA_SEPARATOR : "," <SPACE_SEPARATOR> >
	| < COMMENT: "/*" (~["*"])* "*" (~["/"])* "*/" >
}


SimpleNode program()          :
{/*@bgen(jjtree) PROGRAM */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PROGRAM */
  try {
/*@egen*/
  (([< SPACE_SEPARATOR >])var_declaration()< SPACE_SEPARATOR > )*/*@bgen(jjtree)*/
                                                                   {
                                                                     jjtree.closeNodeScope(jjtn000, true);
                                                                     jjtc000 = false;
                                                                   }
/*@egen*/  {return jjtn000;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void var_declaration()      :
{/*@bgen(jjtree) VAR */
 SimpleNode jjtn000 = new SimpleNode(JJTVAR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/int scope = 0;}
{/*@bgen(jjtree) VAR */
          try {
/*@egen*/
	  ( < DCL > | < DECLARE > ) ( < SPACE_SEPARATOR > scope = scope() | < SPACE_SEPARATOR > )
  id() (< SPACE_SEPARATOR > type() | < SPACE_SEPARATOR > type() < COMMA_SEPARATOR > |
      ( < COMMA_SEPARATOR > minor(scope))*) | minor(scope)/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
        
}


void minor(int parentScope)        :
{/*@bgen(jjtree) MINOR */
 SimpleNode jjtn000 = new SimpleNode(JJTMINOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/int scope = 0;}
{/*@bgen(jjtree) MINOR */
                      try {
/*@egen*/
 
		      ( scope = scope() | < SPACE_SEPARATOR > )
		      
  id() ( < SPACE_SEPARATOR > type() | < SPACE_SEPARATOR > type() < COMMA_SEPARATOR > |
      ( < COMMA_SEPARATOR > minor(scope))* )/*@bgen(jjtree)*/
                      } catch (Throwable jjte000) {
                        if (jjtc000) {
                          jjtree.clearNodeScope(jjtn000);
                          jjtc000 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte000 instanceof RuntimeException) {
                          throw (RuntimeException)jjte000;
                        }
                        if (jjte000 instanceof ParseException) {
                          throw (ParseException)jjte000;
                        }
                        throw (Error)jjte000;
                      } finally {
                        if (jjtc000) {
                          jjtree.closeNodeScope(jjtn000, true);
                        }
                      }
/*@egen*/ 
       	

      
}

int scope()       :
{/*@bgen(jjtree) SCOPE */
 SimpleNode jjtn000 = new SimpleNode(JJTSCOPE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; }
{/*@bgen(jjtree) SCOPE */
        try {
/*@egen*/
	t = < INTEGER > < SPACE_SEPARATOR >/*@bgen(jjtree)*/
                                            {
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtc000 = false;
                                            }
/*@egen*/ { return Integer.parseInt(t.image); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void type()       :
{/*@bgen(jjtree) TYPE */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TYPE */
        try {
/*@egen*/
	(	  codedArithmetic() | String() | Locator() | Picture() | File() | Entry()
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Entry()        :
{/*@bgen(jjtree) Entry */
  SimpleNode jjtn000 = new SimpleNode(JJTENTRY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Entry */
  try {
/*@egen*/
  < ENTRY > [< RETURNS >]/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void File()       :
{/*@bgen(jjtree) File */
  SimpleNode jjtn000 = new SimpleNode(JJTFILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) File */
  try {
/*@egen*/
  < FILE > < SPACE_SEPARATOR > < ENVIRONMENT > < SPACE_SEPARATOR >
  ( Stream() | Record()) (Input() | Output() | Update())
  (Sequential() | Direct()) (Buffered() | Unbuffered()) < SPACE_SEPARATOR > < KEYED > < SPACE_SEPARATOR > < PRINT >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Stream()         :
{/*@bgen(jjtree) Stream */
  SimpleNode jjtn000 = new SimpleNode(JJTSTREAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Stream */
  try {
/*@egen*/
  < SPACE_SEPARATOR > < STREAM >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Record()         :
{/*@bgen(jjtree) Record */
  SimpleNode jjtn000 = new SimpleNode(JJTRECORD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Record */
  try {
/*@egen*/
  < SPACE_SEPARATOR > < RECORD >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Input()        :
{/*@bgen(jjtree) Input */
  SimpleNode jjtn000 = new SimpleNode(JJTINPUT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Input */
  try {
/*@egen*/
  < SPACE_SEPARATOR > < INPUT >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Output()         :
{/*@bgen(jjtree) Output */
  SimpleNode jjtn000 = new SimpleNode(JJTOUTPUT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Output */
  try {
/*@egen*/
  < SPACE_SEPARATOR > < OUTPUT >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Update()         :
{/*@bgen(jjtree) Update */
  SimpleNode jjtn000 = new SimpleNode(JJTUPDATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Update */
  try {
/*@egen*/
  < SPACE_SEPARATOR > <UPDATE >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Sequential()             :
{/*@bgen(jjtree) Sequential */
  SimpleNode jjtn000 = new SimpleNode(JJTSEQUENTIAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Sequential */
  try {
/*@egen*/
  < SPACE_SEPARATOR > <SEQUENTIAL >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Direct()         :
{/*@bgen(jjtree) Direct */
  SimpleNode jjtn000 = new SimpleNode(JJTDIRECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Direct */
  try {
/*@egen*/
  < SPACE_SEPARATOR > < DIRECT >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Buffered()           :
{/*@bgen(jjtree) Buffered */
  SimpleNode jjtn000 = new SimpleNode(JJTBUFFERED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Buffered */
  try {
/*@egen*/
  < SPACE_SEPARATOR > < BUFFERED >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Unbuffered()             :
{/*@bgen(jjtree) Unbuffered */
  SimpleNode jjtn000 = new SimpleNode(JJTUNBUFFERED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Unbuffered */
  try {
/*@egen*/
  < SPACE_SEPARATOR > < UNBUFFERED >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String Picture()                    :
{/*@bgen(jjtree) PictureExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTPICTUREEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ String t; }
{/*@bgen(jjtree) PictureExpression */
  try {
/*@egen*/
  (Pic() | Widepic()) [Real() | Complex()] t = PictureAttribute() [< SPACE_SEPARATOR > < VALUE > ]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return value = t; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Pic()          :
{/*@bgen(jjtree) Picture */
  SimpleNode jjtn000 = new SimpleNode(JJTPICTURE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Picture */
  try {
/*@egen*/
  ( < PIC > | < PICTURE > )/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Widepic()          :
{/*@bgen(jjtree) Widepic */
  SimpleNode jjtn000 = new SimpleNode(JJTWIDEPIC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Widepic */
  try {
/*@egen*/
  < WIDEPIC >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String PictureAttribute()                  :
{/*@bgen(jjtree) PictureAttribute */
 SimpleNode jjtn000 = new SimpleNode(JJTPICTUREATTRIBUTE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/
 String t1 = "";
 String t11 = "";
 
 String t2 = "";
 String t22 = "";
 String t222 = "";
 String t2222 = "";
 
 String t3 = "";
 String t33 = "";
 String t333 = "";

 String t4 = "";

 String t5 = "";
 String t55 = "";
 }
{/*@bgen(jjtree) PictureAttribute */
  try {
/*@egen*/
  < SPACE_SEPARATOR >
  "'" (
	t1 = LengthPicture() t11 = LetterPicture() |
	t2 = LetterPicture() ( t22 = NumberPicture() ( t222 = NumberPicture())*)? t2222 = LetterPicture() |	t3 = NumberPicture() t33 = LetterPicture() t333 = NumberPicture() |
	t4 = LetterPicture() |
	(t5 = NumberPicture() ( t55 = NumberPicture())*)?
     )"'"/*@bgen(jjtree)*/
     {
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
     }
/*@egen*/
     { if(t1 != "") return t1 + t11;
     	if(t2 != "") return t2 + t22 + t222 + t2222;
     	if(t3 != "") return t3 + t33 + t333;
     	if(t4 != "") return t4;
     	if(t5 != "") return t5 + t55;
     	 }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String LetterPicture()                :
{/*@bgen(jjtree) PictureLetter */
 SimpleNode jjtn000 = new SimpleNode(JJTPICTURELETTER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) PictureLetter */
  try {
/*@egen*/
  ( t = < X > | t = < A > | t = < V >)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {return t.toString();}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String NumberPicture()         :
{/*@bgen(jjtree) Number */
 SimpleNode jjtn000 = new SimpleNode(JJTNUMBER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Number */
  try {
/*@egen*/
  t = < INTEGER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {return t.toString();}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


String LengthPicture()               :
{/*@bgen(jjtree) PictureLength */
 SimpleNode jjtn000 = new SimpleNode(JJTPICTURELENGTH);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;
 Token t1;
 Token t2;} 
{/*@bgen(jjtree) PictureLength */
  try {
/*@egen*/
  t = "(" t1 = < INTEGER > t2 = ")"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {return t.toString() + t1.toString() + t2.toString(); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Locator()         :
{/*@bgen(jjtree) Locator */
  SimpleNode jjtn000 = new SimpleNode(JJTLOCATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Locator */
        try {
/*@egen*/
	(Pointer() | Offset() | Handle()) < SPACE_SEPARATOR > < VALUE > < SPACE_SEPARATOR > < LOCATES >/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Pointer()         :
{/*@bgen(jjtree) Pointer */
  SimpleNode jjtn000 = new SimpleNode(JJTPOINTER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Pointer */
  try {
/*@egen*/
  < SPACE_SEPARATOR > < POINTER >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Offset()        :
{/*@bgen(jjtree) Offset */
  SimpleNode jjtn000 = new SimpleNode(JJTOFFSET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Offset */
  try {
/*@egen*/
  < SPACE_SEPARATOR > < OFFSET >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Handle()        :
{/*@bgen(jjtree) Handle */
  SimpleNode jjtn000 = new SimpleNode(JJTHANDLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Handle */
  try {
/*@egen*/
  < SPACE_SEPARATOR > < HANDLE >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void String()        :
{/*@bgen(jjtree) String */
  SimpleNode jjtn000 = new SimpleNode(JJTSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) String */
  try {
/*@egen*/
  ( Char() | Bit() | Graphic() | Widechar()) (StringAttribute() | < SPACE_SEPARATOR > StringAttribute() ) [< SPACE_SEPARATOR > < NONVARYING >] [< SPACE_SEPARATOR > < VALUE >]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Widechar()          :
{/*@bgen(jjtree) Widechar */
  SimpleNode jjtn000 = new SimpleNode(JJTWIDECHAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Widechar */
  try {
/*@egen*/
  < WIDECHAR >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Graphic()         :
{/*@bgen(jjtree) Graphic */
  SimpleNode jjtn000 = new SimpleNode(JJTGRAPHIC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Graphic */
   try {
/*@egen*/
   < GRAPHIC >/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void Char()      :
{/*@bgen(jjtree) Char */
  SimpleNode jjtn000 = new SimpleNode(JJTCHAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
 {/*@bgen(jjtree) Char */
        try {
/*@egen*/
	(< CHAR > | < CHARACTER >)/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
 }

void Bit()     :
{/*@bgen(jjtree) Bit */
  SimpleNode jjtn000 = new SimpleNode(JJTBIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Bit */
  try {
/*@egen*/
  < BIT >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void codedArithmetic()            :
{/*@bgen(jjtree) Arithmetic */
  SimpleNode jjtn000 = new SimpleNode(JJTARITHMETIC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Arithmetic */
  try {
/*@egen*/
  [ Real()  < SPACE_SEPARATOR >| Complex()  < SPACE_SEPARATOR >]
  [ Float()  < SPACE_SEPARATOR >| Fixed()  < SPACE_SEPARATOR >]
  ( Binary() | Decimal() ) (size()) [Signed() | Unsigned() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Signed()        :
{/*@bgen(jjtree) Signed */
  SimpleNode jjtn000 = new SimpleNode(JJTSIGNED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Signed */
  try {
/*@egen*/
  < SPACE_SEPARATOR > < SIGNED >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Unsigned()          :
{/*@bgen(jjtree) Unsigned */
  SimpleNode jjtn000 = new SimpleNode(JJTUNSIGNED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Unsigned */
  try {
/*@egen*/
  < SPACE_SEPARATOR > < UNSIGNED >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Decimal()         :
{/*@bgen(jjtree) Decimal */
  SimpleNode jjtn000 = new SimpleNode(JJTDECIMAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Decimal */
   try {
/*@egen*/
   < DECIMAL >/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void Fixed()       :
{/*@bgen(jjtree) Fixed */
  SimpleNode jjtn000 = new SimpleNode(JJTFIXED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Fixed */
        try {
/*@egen*/
	< FIXED >/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Float()       :
{/*@bgen(jjtree) Float */
  SimpleNode jjtn000 = new SimpleNode(JJTFLOAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Float */
        try {
/*@egen*/
	< FLOAT >/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void Binary()        :
{/*@bgen(jjtree) Binary */
  SimpleNode jjtn000 = new SimpleNode(JJTBINARY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Binary */
        try {
/*@egen*/
	( < BINARY > | < BIN > )/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/	  
}

void size():
{/*@bgen(jjtree) size */
  SimpleNode jjtn000 = new SimpleNode(JJTSIZE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) size */
  try {
/*@egen*/
  [< PRECISION >] (attributes() | attribute())/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void StringAttribute()        :
{/*@bgen(jjtree) Length */
 SimpleNode jjtn000 = new SimpleNode(JJTLENGTH);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Length */
        try {
/*@egen*/
	("(" t = < INTEGER > ")")/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void attribute()     :
{/*@bgen(jjtree) Int */
  SimpleNode jjtn000 = new SimpleNode(JJTINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token p;}
{/*@bgen(jjtree) Int */
        try {
/*@egen*/
	("(" p = < INTEGER > ")")/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{this.value = p.toString();}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void attributes ()        :
{/*@bgen(jjtree) Double */
 SimpleNode jjtn000 = new SimpleNode(JJTDOUBLE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token p;
Token q;}
{/*@bgen(jjtree) Double */
        try {
/*@egen*/
	("(" p = < INTEGER > "," q = <  INTEGER > ")")/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{this.value = p + "," + q;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/

}


void Real()      :
{/*@bgen(jjtree) Real */
  SimpleNode jjtn000 = new SimpleNode(JJTREAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Real */
        try {
/*@egen*/  
	< REAL >/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Complex()         :
{/*@bgen(jjtree) Complex */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPLEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Complex */
  try {
/*@egen*/
  < COMPLEX >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
  

void id()     :
{/*@bgen(jjtree) Id */
 SimpleNode jjtn000 = new SimpleNode(JJTID);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Id */
  try {
/*@egen*/
  t=<PL1_WORD>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}