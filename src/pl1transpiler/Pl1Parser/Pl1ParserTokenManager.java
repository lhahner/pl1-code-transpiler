/* Pl1ParserTokenManager.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. Pl1ParserTokenManager.java */
package pl1transpiler.Pl1Parser;
import java.util.ArrayList;

/** Token Manager. */
@SuppressWarnings ("unused")
public class Pl1ParserTokenManager implements Pl1ParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x30000008000L) != 0L || (active1 & 0x30000000L) != 0L)
         {
            jjmatchedKind = 99;
            return 28;
         }
         if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 103;
            return 29;
         }
         if ((active1 & 0x4000000000L) != 0L)
            return 30;
         if ((active1 & 0xc0000000L) != 0L)
         {
            jjmatchedKind = 97;
            return 31;
         }
         if ((active0 & 0xffff0cffffdf7ffeL) != 0L || (active1 & 0x10fffffffL) != 0L)
         {
            jjmatchedKind = 101;
            return 32;
         }
         if ((active0 & 0xf00000200000L) != 0L)
         {
            jjmatchedKind = 98;
            return 33;
         }
         return -1;
      case 1:
         if ((active0 & 0xfffffffffffffffeL) != 0L || (active1 & 0x1ffffffffL) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 1;
            return 32;
         }
         return -1;
      case 2:
         if ((active0 & 0x3207eL) != 0L || (active1 & 0x100000000L) != 0L)
            return 32;
         if ((active0 & 0xfffffffffffcdf80L) != 0L || (active1 & 0xffffffffL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 101;
               jjmatchedPos = 2;
            }
            return 32;
         }
         return -1;
      case 3:
         if ((active0 & 0x6001205600L) != 0L || (active1 & 0x60aL) != 0L)
            return 32;
         if ((active0 & 0xffffff9ffede899cL) != 0L || (active1 & 0xfffff9f5L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 101;
               jjmatchedPos = 3;
            }
            return 32;
         }
         return -1;
      case 4:
         if ((active0 & 0xfffeff1fee5e8a1cL) != 0L || (active1 & 0xefdff89dL) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 4;
            return 32;
         }
         if ((active0 & 0x1008010800180L) != 0L || (active1 & 0x10200160L) != 0L)
            return 32;
         return -1;
      case 5:
         if ((active0 & 0x81000008a100810L) != 0L || (active1 & 0x9444014L) != 0L)
            return 32;
         if ((active0 & 0xf7eeff1f644e820cL) != 0L || (active1 & 0xe69bb889L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 5;
            return 32;
         }
         return -1;
      case 6:
         if ((active0 & 0x75c6d41440480200L) != 0L || (active1 & 0x2698b880L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 101;
               jjmatchedPos = 6;
            }
            return 32;
         }
         if ((active0 & 0x82282b0b2406800cL) != 0L || (active1 & 0xc0030009L) != 0L)
            return 32;
         return -1;
      case 7:
         if ((active0 & 0x35c2c01440400200L) != 0L || (active1 & 0x6883800L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 7;
            return 32;
         }
         if ((active0 & 0x4004170000080000L) != 0L || (active1 & 0x20108080L) != 0L)
            return 32;
         return -1;
      case 8:
         if ((active0 & 0x24c2801400400200L) != 0L || (active1 & 0x2080000L) != 0L)
            return 32;
         if ((active0 & 0x1100400040000000L) != 0L || (active1 & 0x4803800L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 8;
            return 32;
         }
         return -1;
      case 9:
         if ((active0 & 0x1000000000000000L) != 0L || (active1 & 0x3800L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 9;
            return 32;
         }
         if ((active0 & 0x100400040000000L) != 0L || (active1 & 0x4800000L) != 0L)
            return 32;
         return -1;
      case 10:
         if ((active1 & 0x3800L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 10;
            return 32;
         }
         if ((active0 & 0x1000000000000000L) != 0L)
            return 32;
         return -1;
      case 11:
         if ((active1 & 0x2800L) != 0L)
            return 32;
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 11;
            return 32;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 10:
         return jjStartNfaWithStates_0(0, 102, 30);
      case 39:
         return jjStopAtPos(0, 111);
      case 40:
         return jjStopAtPos(0, 112);
      case 41:
         return jjStopAtPos(0, 113);
      case 44:
         return jjStopAtPos(0, 114);
      case 45:
         return jjStopAtPos(0, 106);
      case 59:
         return jjStartNfaWithStates_0(0, 103, 29);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0xf00000200000L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x3f000000000050L, 0x100000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1c0000000040600L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0xe0000000040002eL, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x7000000000800000L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x3000180L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x8000000004000000L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x8000000L, 0x1L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x1000L, 0xfeL);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x30000000L, 0xe00L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x40000000L, 0x7000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x180000000L, 0x78000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x600032000L, 0x380000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x800004000L, 0x400000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x1000100800L, 0x1800000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x6000000000L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x8000080000L, 0xe000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x30000008000L, 0x30000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0xc0000000000L, 0x0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc0000000L);
      default :
         return jjMoveNfa_0(7, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1032018008000L, active1, 0x30080000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x2L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x820000080000402cL, active1, 0xc00103L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L, active1, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x600L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0xc020c00015300d0L, active1, 0x100000e00L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000100L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xc0000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000008000881000L, active1, 0x60000fcL);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x1c0000262040000L, active1, 0x107000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8018000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x504200000L, active1, 0x200000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000002800L, active1, 0x1000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0xc800000000000L, active1, 0x60000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x6000000000000000L, active1, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x30004000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000004004e00L, active1, 0x2000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L, active1, 0x4000000L);
      case 67:
      case 99:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 5;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x200000002002000cL, active1, 0x400000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0xc0100000000L, active1, 0x8000004L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x400200000L, active1, 0x2L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x204000080000000L, active1, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000100000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x8208200001000L, active1, 0x200008L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200L);
      case 76:
      case 108:
         if ((active0 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(2, 1, 32);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L, active1, 0xd0000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000440000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 6;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x81c0100048000010L, active1, 0x3000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x100L, active1, 0x30L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L, active1, 0x40L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800000L);
      case 82:
      case 114:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 13, 32);
         return jjMoveStringLiteralDfa3_0(active0, 0x800031002008000L, active1, 0x21084000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x1402000080000L, active1, 0x100400L);
      case 84:
      case 116:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 96, 32);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000800800800000L, active1, 0x78880L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x1020000000000000L, active1, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L, active1, 0x1L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0x420000020000110L, active1, 0x48081001L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L, active1, 0x2000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x50000008000000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 24, 32);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 32);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 65, 32);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 73, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0xc8030c0010400080L, active1, 0x1000180L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L, active1, 0x4L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x1200400100080008L, active1, 0x20118000L);
      case 75:
      case 107:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 37, 32);
         break;
      case 76:
      case 108:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0x2008000000000004L, active1, 0x2000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L, active1, 0x4000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000200100000L, active1, 0x200010L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x908000000000L, active1, 0x80420000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x4040000L, active1, 0x40000L);
      case 82:
      case 114:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x800200L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 74, 32);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000020800L, active1, 0x808L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x1800000000L, active1, 0x14800060L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L, active1, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa4_0(active0, 0x30000008000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x42000204L, active1, 0x21004000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0xc00041000000000L, active1, 0L);
      case 68:
      case 100:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 7, 32);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 32);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 72, 32);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0x1L);
      case 69:
      case 101:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 92, 32);
         return jjMoveStringLiteralDfa5_0(active0, 0x84000080100000L, active1, 0x800000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000080000L, active1, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x40030400008800L, active1, 0x2000008L);
      case 76:
      case 108:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 32);
         return jjMoveStringLiteralDfa5_0(active0, 0x20000008040000L, active1, 0x810L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000008L, active1, 0x80080000L);
      case 78:
      case 110:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 39, 32);
         return jjMoveStringLiteralDfa5_0(active0, 0x202200100400000L, active1, 0x20000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1a004L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0xd100100800000010L, active1, 0x400080L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000L);
      case 84:
      case 116:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 8, 32);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 69, 32);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 70, 32);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 85, 32);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000220000000L, active1, 0x48100000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000020000L, active1, 0x40000L);
      case 89:
      case 121:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 32);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x800100000008L, active1, 0x8L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000000L);
      case 67:
      case 99:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 11, 32);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000200L, active1, 0L);
      case 68:
      case 100:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 20, 32);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 86, 32);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 27, 32);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 91, 32);
         return jjMoveStringLiteralDfa6_0(active0, 0x200200220040000L, active1, 0x80801L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x8008080004000000L, active1, 0x80100000L);
      case 76:
      case 108:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 78, 32);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000L);
      case 77:
      case 109:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 88, 32);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L, active1, 0x80L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000430800088000L, active1, 0x81a000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x1100000000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 52, 32);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 66, 32);
         return jjMoveStringLiteralDfa6_0(active0, 0x404000040020004L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000400400000L, active1, 0x1000L);
      case 84:
      case 116:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 32);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 31, 32);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 59, 32);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 82, 32);
         return jjMoveStringLiteralDfa6_0(active0, 0x40001000000000L, active1, 0x40000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000000L, active1, 0L);
      case 89:
      case 121:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 4, 32);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 68, 32);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000540000000000L, active1, 0x8080L);
      case 67:
      case 99:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 26, 32);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 43, 32);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 63, 32);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(6, 64, 32);
         break;
      case 68:
      case 100:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 45, 32);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 57, 32);
         break;
      case 69:
      case 101:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 2, 32);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 17, 32);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 53, 32);
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000080000L, active1, 0x4000800L);
      case 71:
      case 103:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x30000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x2042000400400000L, active1, 0x1000L);
      case 76:
      case 108:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(6, 3, 32);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(6, 32, 32);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(6, 67, 32);
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000000L, active1, 0x20000000L);
      case 78:
      case 110:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 51, 32);
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000000L, active1, 0x2002000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000000L, active1, 0x100000L);
      case 82:
      case 114:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 33, 32);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 94, 32);
         break;
      case 83:
      case 115:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 29, 32);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 35, 32);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 80, 32);
         break;
      case 84:
      case 116:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 95, 32);
         return jjMoveStringLiteralDfa7_0(active0, 0x80800000000200L, active1, 0x880000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L, active1, 0L);
      case 88:
      case 120:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 18, 32);
         break;
      case 89:
      case 121:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 81, 32);
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 52:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 40, 32);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000L, active1, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000L, active1, 0L);
      case 68:
      case 100:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 19, 32);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 50, 32);
         break;
      case 69:
      case 101:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(7, 93, 32);
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000200L, active1, 0x2082000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x800040000000L, active1, 0x800000L);
      case 76:
      case 108:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 44, 32);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 62, 32);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(7, 71, 32);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(7, 79, 32);
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000000L, active1, 0L);
      case 78:
      case 110:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 84, 32);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x800L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000400400000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 42, 32);
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000L, active1, 0x4000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000000L, active1, 0L);
      case 90:
      case 122:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 41, 32);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800000L);
      case 67:
      case 99:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 47, 32);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000L);
      case 68:
      case 100:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 55, 32);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(8, 89, 32);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800L);
      case 69:
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 36, 32);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 61, 32);
         return jjMoveStringLiteralDfa9_0(active0, 0x1100000000000000L, active1, 0x4000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(8, 22, 32);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(8, 34, 32);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 49, 32);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 54, 32);
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000L, active1, 0x1000L);
      case 82:
      case 114:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(8, 9, 32);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(8, 83, 32);
         break;
      case 83:
      case 115:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 58, 32);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1000L);
      case 68:
      case 100:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 56, 32);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(9, 90, 32);
         break;
      case 69:
      case 101:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 46, 32);
         break;
      case 71:
      case 103:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(9, 30, 32);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x800L);
      case 76:
      case 108:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(9, 87, 32);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x800L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2000L);
      case 84:
      case 116:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 60, 32);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, 0L, active1);
      return 11;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(11, 77, 32);
         break;
      case 76:
      case 108:
         return jjMoveStringLiteralDfa12_0(active1, 0x1000L);
      case 78:
      case 110:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(11, 75, 32);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, 0L, active1);
}
private int jjMoveStringLiteralDfa12_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(10, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, 0L, active1);
      return 12;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(12, 76, 32);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, 0L, active1);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 28;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 101)
                        kind = 101;
                     { jjCheckNAddTwoStates(4, 5); }
                  }
                  else if (curChar == 45)
                     { jjCheckNAddTwoStates(5, 6); }
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 101)
                        kind = 101;
                     { jjCheckNAddTwoStates(4, 5); }
                  }
                  else if (curChar == 45)
                     { jjCheckNAddTwoStates(5, 6); }
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 101)
                        kind = 101;
                     { jjCheckNAddTwoStates(4, 5); }
                  }
                  else if ((0x800004100003200L & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     { jjCheckNAddStates(0, 5); }
                  }
                  else if (curChar == 10)
                  {
                     if (kind > 103)
                        kind = 103;
                     { jjCheckNAddStates(6, 10); }
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 11;
                  else if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 8;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 100)
                        kind = 100;
                     { jjCheckNAdd(3); }
                  }
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 105)
                        kind = 105;
                  }
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 101)
                        kind = 101;
                     { jjCheckNAddTwoStates(4, 5); }
                  }
                  else if (curChar == 45)
                     { jjCheckNAddTwoStates(5, 6); }
                  break;
               case 29:
                  if ((0x800004100003200L & l) != 0L)
                     { jjCheckNAddStates(11, 13); }
                  else if (curChar == 44)
                     { jjCheckNAddTwoStates(25, 26); }
                  else if (curChar == 10)
                     { jjCheckNAddStates(11, 13); }
                  if ((0x800004100003200L & l) != 0L)
                  {
                     if (kind > 104)
                        kind = 104;
                     { jjCheckNAdd(21); }
                  }
                  else if (curChar == 10)
                  {
                     if (kind > 103)
                        kind = 103;
                     { jjCheckNAddTwoStates(19, 20); }
                  }
                  if ((0x800004100003200L & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     { jjCheckNAddTwoStates(19, 20); }
                  }
                  break;
               case 30:
                  if ((0x800004100003200L & l) != 0L)
                     { jjCheckNAddStates(11, 13); }
                  else if (curChar == 44)
                     { jjCheckNAddTwoStates(25, 26); }
                  else if (curChar == 10)
                     { jjCheckNAddStates(11, 13); }
                  if ((0x800004100003200L & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     { jjCheckNAddTwoStates(19, 20); }
                  }
                  else if (curChar == 10)
                  {
                     if (kind > 103)
                        kind = 103;
                     { jjCheckNAddTwoStates(19, 20); }
                  }
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 101)
                        kind = 101;
                     { jjCheckNAddTwoStates(4, 5); }
                  }
                  else if (curChar == 45)
                     { jjCheckNAddTwoStates(5, 6); }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  { jjCheckNAdd(3); }
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  { jjCheckNAddTwoStates(4, 5); }
                  break;
               case 5:
                  if (curChar == 45)
                     { jjCheckNAddTwoStates(5, 6); }
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  { jjCheckNAddTwoStates(5, 6); }
                  break;
               case 9:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 10:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 11:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(12, 13); }
                  break;
               case 12:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(12, 13); }
                  break;
               case 13:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(14, 16); }
                  break;
               case 14:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(14, 16); }
                  break;
               case 15:
                  if (curChar == 47 && kind > 110)
                     kind = 110;
                  break;
               case 16:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 18:
                  if ((0x800004100003200L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  { jjCheckNAddStates(0, 5); }
                  break;
               case 19:
                  if ((0x800004100003200L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  { jjCheckNAddTwoStates(19, 20); }
                  break;
               case 20:
                  if (curChar != 10)
                     break;
                  if (kind > 103)
                     kind = 103;
                  { jjCheckNAddTwoStates(19, 20); }
                  break;
               case 21:
                  if ((0x800004100003200L & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  { jjCheckNAdd(21); }
                  break;
               case 22:
                  if ((0x800004100003200L & l) != 0L)
                     { jjCheckNAddStates(11, 13); }
                  break;
               case 23:
                  if (curChar == 10)
                     { jjCheckNAddStates(11, 13); }
                  break;
               case 24:
                  if (curChar == 44)
                     { jjCheckNAddTwoStates(25, 26); }
                  break;
               case 25:
                  if ((0x800004100003200L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddTwoStates(25, 26); }
                  break;
               case 26:
                  if (curChar != 10)
                     break;
                  if (kind > 109)
                     kind = 109;
                  { jjCheckNAddTwoStates(25, 26); }
                  break;
               case 27:
                  if (curChar != 10)
                     break;
                  if (kind > 103)
                     kind = 103;
                  { jjCheckNAddStates(6, 10); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 31:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 101)
                        kind = 101;
                     { jjCheckNAddTwoStates(4, 5); }
                  }
                  else if (curChar == 95)
                     { jjCheckNAddTwoStates(5, 6); }
                  if ((0x100000001000000L & l) != 0L)
                  {
                     if (kind > 97)
                        kind = 97;
                     { jjCheckNAdd(0); }
                  }
                  break;
               case 32:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 101)
                        kind = 101;
                     { jjCheckNAddTwoStates(4, 5); }
                  }
                  else if (curChar == 95)
                     { jjCheckNAddTwoStates(5, 6); }
                  break;
               case 7:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 101)
                        kind = 101;
                     { jjCheckNAddTwoStates(4, 5); }
                  }
                  if ((0x40000000400000L & l) != 0L)
                  {
                     if (kind > 99)
                        kind = 99;
                     { jjCheckNAdd(2); }
                  }
                  else if ((0x200000002L & l) != 0L)
                  {
                     if (kind > 98)
                        kind = 98;
                     { jjCheckNAdd(1); }
                  }
                  else if ((0x100000001000000L & l) != 0L)
                  {
                     if (kind > 97)
                        kind = 97;
                     { jjCheckNAdd(0); }
                  }
                  break;
               case 33:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 101)
                        kind = 101;
                     { jjCheckNAddTwoStates(4, 5); }
                  }
                  else if (curChar == 95)
                     { jjCheckNAddTwoStates(5, 6); }
                  if ((0x200000002L & l) != 0L)
                  {
                     if (kind > 98)
                        kind = 98;
                     { jjCheckNAdd(1); }
                  }
                  break;
               case 28:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 101)
                        kind = 101;
                     { jjCheckNAddTwoStates(4, 5); }
                  }
                  else if (curChar == 95)
                     { jjCheckNAddTwoStates(5, 6); }
                  if ((0x40000000400000L & l) != 0L)
                  {
                     if (kind > 99)
                        kind = 99;
                     { jjCheckNAdd(2); }
                  }
                  break;
               case 0:
                  if ((0x100000001000000L & l) == 0L)
                     break;
                  if (kind > 97)
                     kind = 97;
                  { jjCheckNAdd(0); }
                  break;
               case 1:
                  if ((0x200000002L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAdd(1); }
                  break;
               case 2:
                  if ((0x40000000400000L & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  { jjCheckNAdd(2); }
                  break;
               case 4:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  { jjCheckNAddTwoStates(4, 5); }
                  break;
               case 5:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(5, 6); }
                  break;
               case 6:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  { jjCheckNAddTwoStates(5, 6); }
                  break;
               case 8:
                  if (curChar != 124)
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAdd(9); }
                  break;
               case 9:
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAdd(9); }
                  break;
               case 12:
                  { jjAddStates(14, 15); }
                  break;
               case 14:
                  { jjAddStates(16, 17); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 9:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 12:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(14, 15); }
                  break;
               case 14:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(16, 17); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 28 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, "\12", null, null, null, "\55", null, "\73", null, 
null, "\47", "\50", "\51", "\54", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   19, 20, 21, 22, 23, 24, 19, 20, 22, 23, 24, 22, 23, 24, 12, 13, 
   14, 16, 
};

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
         matchedToken = jjFillToken();
         return matchedToken;
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public Pl1ParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public Pl1ParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 28; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffffffL, 0x7ffffffffffffL, 
};
static final long[] jjtoSkip = {
   0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[28];
    private final int[] jjstateSet = new int[2 * 28];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
