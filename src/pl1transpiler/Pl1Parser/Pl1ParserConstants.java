/* Generated By:JJTree&JavaCC: Do not edit this line. Pl1ParserConstants.java */
package pl1transpiler.Pl1Parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface Pl1ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int DCL = 1;
  /** RegularExpression Id. */
  int DECLARE = 2;
  /** RegularExpression Id. */
  int DECIMAL = 3;
  /** RegularExpression Id. */
  int BINARY = 4;
  /** RegularExpression Id. */
  int DEC = 5;
  /** RegularExpression Id. */
  int BIN = 6;
  /** RegularExpression Id. */
  int FIXED = 7;
  /** RegularExpression Id. */
  int FLOAT = 8;
  /** RegularExpression Id. */
  int CHARACTER = 9;
  /** RegularExpression Id. */
  int CHAR = 10;
  /** RegularExpression Id. */
  int STATIC = 11;
  /** RegularExpression Id. */
  int INIT = 12;
  /** RegularExpression Id. */
  int PTR = 13;
  /** RegularExpression Id. */
  int REAL = 14;
  /** RegularExpression Id. */
  int VARYING = 15;
  /** RegularExpression Id. */
  int PIC = 16;
  /** RegularExpression Id. */
  int PICTURE = 17;
  /** RegularExpression Id. */
  int COMPLEX = 18;
  /** RegularExpression Id. */
  int UNSIGNED = 19;
  /** RegularExpression Id. */
  int SIGNED = 20;
  /** RegularExpression Id. */
  int AREA = 21;
  /** RegularExpression Id. */
  int DIMENSION = 22;
  /** RegularExpression Id. */
  int ENTRY = 23;
  /** RegularExpression Id. */
  int FILE = 24;
  /** RegularExpression Id. */
  int FORMAT = 25;
  /** RegularExpression Id. */
  int GRAPHIC = 26;
  /** RegularExpression Id. */
  int HANDLE = 27;
  /** RegularExpression Id. */
  int LABEL = 28;
  /** RegularExpression Id. */
  int LOCATES = 29;
  /** RegularExpression Id. */
  int NONVARYING = 30;
  /** RegularExpression Id. */
  int OFFSET = 31;
  /** RegularExpression Id. */
  int ORDINAL = 32;
  /** RegularExpression Id. */
  int POINTER = 33;
  /** RegularExpression Id. */
  int PRECISION = 34;
  /** RegularExpression Id. */
  int RETURNS = 35;
  /** RegularExpression Id. */
  int STRUCTURE = 36;
  /** RegularExpression Id. */
  int TASK = 37;
  /** RegularExpression Id. */
  int TYPE = 38;
  /** RegularExpression Id. */
  int UNION = 39;
  /** RegularExpression Id. */
  int VARYING4 = 40;
  /** RegularExpression Id. */
  int VARYINGZ = 41;
  /** RegularExpression Id. */
  int WIDECHAR = 42;
  /** RegularExpression Id. */
  int WIDEPIC = 43;
  /** RegularExpression Id. */
  int ABNORMAL = 44;
  /** RegularExpression Id. */
  int ALIGNED = 45;
  /** RegularExpression Id. */
  int ASSIGNABLE = 46;
  /** RegularExpression Id. */
  int AUTOMATIC = 47;
  /** RegularExpression Id. */
  int BASED = 48;
  /** RegularExpression Id. */
  int BIGENDIAN = 49;
  /** RegularExpression Id. */
  int BUFFERED = 50;
  /** RegularExpression Id. */
  int BUILTIN = 51;
  /** RegularExpression Id. */
  int BYADDR = 52;
  /** RegularExpression Id. */
  int BYVALUE = 53;
  /** RegularExpression Id. */
  int CONDITION = 54;
  /** RegularExpression Id. */
  int CONNECTED = 55;
  /** RegularExpression Id. */
  int CONTROLLED = 56;
  /** RegularExpression Id. */
  int DEFINED = 57;
  /** RegularExpression Id. */
  int DIMACROSS = 58;
  /** RegularExpression Id. */
  int DIRECT = 59;
  /** RegularExpression Id. */
  int ENVIRONMENT = 60;
  /** RegularExpression Id. */
  int EXCLUSIVE = 61;
  /** RegularExpression Id. */
  int EXTERNAL = 62;
  /** RegularExpression Id. */
  int GENERIC = 63;
  /** RegularExpression Id. */
  int HEXADEC = 64;
  /** RegularExpression Id. */
  int IEEE = 65;
  /** RegularExpression Id. */
  int INDFOR = 66;
  /** RegularExpression Id. */
  int INITIAL = 67;
  /** RegularExpression Id. */
  int INONLY = 68;
  /** RegularExpression Id. */
  int INOUT = 69;
  /** RegularExpression Id. */
  int INPUT = 70;
  /** RegularExpression Id. */
  int INTERMAL = 71;
  /** RegularExpression Id. */
  int KEYED = 72;
  /** RegularExpression Id. */
  int LIKE = 73;
  /** RegularExpression Id. */
  int LIST = 74;
  /** RegularExpression Id. */
  int LITTLEENDIAN = 75;
  /** RegularExpression Id. */
  int NONASSIGNABLE = 76;
  /** RegularExpression Id. */
  int NONCONNECTED = 77;
  /** RegularExpression Id. */
  int NORMAL = 78;
  /** RegularExpression Id. */
  int OPTIONAL = 79;
  /** RegularExpression Id. */
  int OPTIONS = 80;
  /** RegularExpression Id. */
  int OUTONLY = 81;
  /** RegularExpression Id. */
  int OUTPUT = 82;
  /** RegularExpression Id. */
  int PARAMETER = 83;
  /** RegularExpression Id. */
  int POSITION = 84;
  /** RegularExpression Id. */
  int PRINT = 85;
  /** RegularExpression Id. */
  int RECORD = 86;
  /** RegularExpression Id. */
  int SEQUENTIAL = 87;
  /** RegularExpression Id. */
  int STREAM = 88;
  /** RegularExpression Id. */
  int UNALIGNED = 89;
  /** RegularExpression Id. */
  int UNBUFFERED = 90;
  /** RegularExpression Id. */
  int UPDATE = 91;
  /** RegularExpression Id. */
  int VALUE = 92;
  /** RegularExpression Id. */
  int VARIABLE = 93;
  /** RegularExpression Id. */
  int XMLATTR = 94;
  /** RegularExpression Id. */
  int XMLOMIT = 95;
  /** RegularExpression Id. */
  int BIT = 96;
  /** RegularExpression Id. */
  int X = 97;
  /** RegularExpression Id. */
  int A = 98;
  /** RegularExpression Id. */
  int V = 99;
  /** RegularExpression Id. */
  int INTEGER = 100;
  /** RegularExpression Id. */
  int PL1_WORD = 101;
  /** RegularExpression Id. */
  int EOL = 102;
  /** RegularExpression Id. */
  int SPACE_SEPARATOR = 103;
  /** RegularExpression Id. */
  int SPACECHAR = 104;
  /** RegularExpression Id. */
  int SCOPE = 105;
  /** RegularExpression Id. */
  int MINUSCHAR = 106;
  /** RegularExpression Id. */
  int PREPROC_COMMENT = 107;
  /** RegularExpression Id. */
  int SCOL = 108;
  /** RegularExpression Id. */
  int COMMA_SEPARATOR = 109;
  /** RegularExpression Id. */
  int COMMENT = 110;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"DCL\"",
    "\"DECLARE\"",
    "\"DECIMAL\"",
    "\"BINARY\"",
    "\"DEC\"",
    "\"BIN\"",
    "\"FIXED\"",
    "\"FLOAT\"",
    "\"CHARACTER\"",
    "\"CHAR\"",
    "\"STATIC\"",
    "\"INIT\"",
    "\"PTR\"",
    "\"REAL\"",
    "\"VARYING\"",
    "\"PIC\"",
    "\"PICTURE\"",
    "\"COMPLEX\"",
    "\"UNSIGNED\"",
    "\"SIGNED\"",
    "\"AREA\"",
    "\"DIMENSION\"",
    "\"ENTRY\"",
    "\"FILE\"",
    "\"FORMAT\"",
    "\"GRAPHIC\"",
    "\"HANDLE\"",
    "\"LABEL\"",
    "\"LOCATES\"",
    "\"NONVARYING\"",
    "\"OFFSET\"",
    "\"ORDINAL\"",
    "\"POINTER\"",
    "\"PRECISION\"",
    "\"RETURNS\"",
    "\"STRUCTURE\"",
    "\"TASK\"",
    "\"TYPE\"",
    "\"UNION\"",
    "\"VARYING4\"",
    "\"VARYINGZ\"",
    "\"WIDECHAR\"",
    "\"WIDEPIC\"",
    "\"ABNORMAL\"",
    "\"ALIGNED\"",
    "\"ASSIGNABLE\"",
    "\"AUTOMATIC\"",
    "\"BASED\"",
    "\"BIGENDIAN\"",
    "\"BUFFERED\"",
    "\"BUILTIN\"",
    "\"BYADDR\"",
    "\"BYVALUE\"",
    "\"CONDITION\"",
    "\"CONNECTED\"",
    "\"CONTROLLED\"",
    "\"DEFINED\"",
    "\"DIMACROSS\"",
    "\"DIRECT\"",
    "\"ENVIRONMENT\"",
    "\"EXCLUSIVE\"",
    "\"EXTERNAL\"",
    "\"GENERIC\"",
    "\"HEXADEC\"",
    "\"IEEE\"",
    "\"INDFOR\"",
    "\"INITIAL\"",
    "\"INONLY\"",
    "\"INOUT\"",
    "\"INPUT\"",
    "\"INTERMAL\"",
    "\"KEYED\"",
    "\"LIKE\"",
    "\"LIST\"",
    "\"LITTLEENDIAN\"",
    "\"NONASSIGNABLE\"",
    "\"NONCONNECTED\"",
    "\"NORMAL\"",
    "\"OPTIONAL\"",
    "\"OPTIONS\"",
    "\"OUTONLY\"",
    "\"OUTPUT\"",
    "\"PARAMETER\"",
    "\"POSITION\"",
    "\"PRINT\"",
    "\"RECORD\"",
    "\"SEQUENTIAL\"",
    "\"STREAM\"",
    "\"UNALIGNED\"",
    "\"UNBUFFERED\"",
    "\"UPDATE\"",
    "\"VALUE\"",
    "\"VARIABLE\"",
    "\"XMLATTR\"",
    "\"XMLOMIT\"",
    "\"BIT\"",
    "<X>",
    "<A>",
    "<V>",
    "<INTEGER>",
    "<PL1_WORD>",
    "\"\\n\"",
    "<SPACE_SEPARATOR>",
    "<SPACECHAR>",
    "<SCOPE>",
    "\"-\"",
    "<PREPROC_COMMENT>",
    "\";\"",
    "<COMMA_SEPARATOR>",
    "<COMMENT>",
    "\"\\\'\"",
    "\"(\"",
    "\")\"",
    "\",\"",
  };

}
