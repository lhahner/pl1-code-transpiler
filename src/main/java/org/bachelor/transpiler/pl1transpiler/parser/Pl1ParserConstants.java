/* Generated By:JJTree&JavaCC: Do not edit this line. Pl1ParserConstants.java */
package org.bachelor.transpiler.pl1transpiler.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface Pl1ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int DCL = 1;
  /** RegularExpression Id. */
  int DECLARE = 2;
  /** RegularExpression Id. */
  int PROCEDURE = 3;
  /** RegularExpression Id. */
  int PROC = 4;
  /** RegularExpression Id. */
  int DECIMAL = 5;
  /** RegularExpression Id. */
  int BINARY = 6;
  /** RegularExpression Id. */
  int DEC = 7;
  /** RegularExpression Id. */
  int BIN = 8;
  /** RegularExpression Id. */
  int FIXED = 9;
  /** RegularExpression Id. */
  int FLOAT = 10;
  /** RegularExpression Id. */
  int CHARACTER = 11;
  /** RegularExpression Id. */
  int CHAR = 12;
  /** RegularExpression Id. */
  int STATIC = 13;
  /** RegularExpression Id. */
  int INIT = 14;
  /** RegularExpression Id. */
  int PTR = 15;
  /** RegularExpression Id. */
  int REAL = 16;
  /** RegularExpression Id. */
  int VARYING = 17;
  /** RegularExpression Id. */
  int PIC = 18;
  /** RegularExpression Id. */
  int PICTURE = 19;
  /** RegularExpression Id. */
  int COMPLEX = 20;
  /** RegularExpression Id. */
  int UNSIGNED = 21;
  /** RegularExpression Id. */
  int SIGNED = 22;
  /** RegularExpression Id. */
  int AREA = 23;
  /** RegularExpression Id. */
  int DIMENSION = 24;
  /** RegularExpression Id. */
  int ENTRY = 25;
  /** RegularExpression Id. */
  int FILE = 26;
  /** RegularExpression Id. */
  int FORMAT = 27;
  /** RegularExpression Id. */
  int GRAPHIC = 28;
  /** RegularExpression Id. */
  int HANDLE = 29;
  /** RegularExpression Id. */
  int LABEL = 30;
  /** RegularExpression Id. */
  int LOCATES = 31;
  /** RegularExpression Id. */
  int NONVARYING = 32;
  /** RegularExpression Id. */
  int OFFSET = 33;
  /** RegularExpression Id. */
  int ORDINAL = 34;
  /** RegularExpression Id. */
  int POINTER = 35;
  /** RegularExpression Id. */
  int PRECISION = 36;
  /** RegularExpression Id. */
  int RETURNS = 37;
  /** RegularExpression Id. */
  int STRUCTURE = 38;
  /** RegularExpression Id. */
  int TASK = 39;
  /** RegularExpression Id. */
  int TYPE = 40;
  /** RegularExpression Id. */
  int UNION = 41;
  /** RegularExpression Id. */
  int VARYING4 = 42;
  /** RegularExpression Id. */
  int VARYINGZ = 43;
  /** RegularExpression Id. */
  int WIDECHAR = 44;
  /** RegularExpression Id. */
  int WIDEPIC = 45;
  /** RegularExpression Id. */
  int ABNORMAL = 46;
  /** RegularExpression Id. */
  int ALIGNED = 47;
  /** RegularExpression Id. */
  int ASSIGNABLE = 48;
  /** RegularExpression Id. */
  int AUTOMATIC = 49;
  /** RegularExpression Id. */
  int BASED = 50;
  /** RegularExpression Id. */
  int BIGENDIAN = 51;
  /** RegularExpression Id. */
  int BUFFERED = 52;
  /** RegularExpression Id. */
  int BUILTIN = 53;
  /** RegularExpression Id. */
  int BYADDR = 54;
  /** RegularExpression Id. */
  int BYVALUE = 55;
  /** RegularExpression Id. */
  int CONDITION = 56;
  /** RegularExpression Id. */
  int CONNECTED = 57;
  /** RegularExpression Id. */
  int CONTROLLED = 58;
  /** RegularExpression Id. */
  int DEFINED = 59;
  /** RegularExpression Id. */
  int DIMACROSS = 60;
  /** RegularExpression Id. */
  int DIRECT = 61;
  /** RegularExpression Id. */
  int ENVIRONMENT = 62;
  /** RegularExpression Id. */
  int EXCLUSIVE = 63;
  /** RegularExpression Id. */
  int EXTERNAL = 64;
  /** RegularExpression Id. */
  int GENERIC = 65;
  /** RegularExpression Id. */
  int HEXADEC = 66;
  /** RegularExpression Id. */
  int IEEE = 67;
  /** RegularExpression Id. */
  int INDFOR = 68;
  /** RegularExpression Id. */
  int INITIAL = 69;
  /** RegularExpression Id. */
  int INONLY = 70;
  /** RegularExpression Id. */
  int INOUT = 71;
  /** RegularExpression Id. */
  int INPUT = 72;
  /** RegularExpression Id. */
  int INTERMAL = 73;
  /** RegularExpression Id. */
  int KEYED = 74;
  /** RegularExpression Id. */
  int LIKE = 75;
  /** RegularExpression Id. */
  int LIST = 76;
  /** RegularExpression Id. */
  int LITTLEENDIAN = 77;
  /** RegularExpression Id. */
  int NONASSIGNABLE = 78;
  /** RegularExpression Id. */
  int NONCONNECTED = 79;
  /** RegularExpression Id. */
  int NORMAL = 80;
  /** RegularExpression Id. */
  int OPTIONAL = 81;
  /** RegularExpression Id. */
  int OPTIONS = 82;
  /** RegularExpression Id. */
  int OUTONLY = 83;
  /** RegularExpression Id. */
  int OUTPUT = 84;
  /** RegularExpression Id. */
  int PARAMETER = 85;
  /** RegularExpression Id. */
  int POSITION = 86;
  /** RegularExpression Id. */
  int PRINT = 87;
  /** RegularExpression Id. */
  int RECORD = 88;
  /** RegularExpression Id. */
  int SEQUENTIAL = 89;
  /** RegularExpression Id. */
  int STREAM = 90;
  /** RegularExpression Id. */
  int UNALIGNED = 91;
  /** RegularExpression Id. */
  int UNBUFFERED = 92;
  /** RegularExpression Id. */
  int UPDATE = 93;
  /** RegularExpression Id. */
  int VALUE = 94;
  /** RegularExpression Id. */
  int VARIABLE = 95;
  /** RegularExpression Id. */
  int XMLATTR = 96;
  /** RegularExpression Id. */
  int XMLOMIT = 97;
  /** RegularExpression Id. */
  int END = 98;
  /** RegularExpression Id. */
  int BIT = 99;
  /** RegularExpression Id. */
  int ASSEMBLER = 100;
  /** RegularExpression Id. */
  int COBOL = 101;
  /** RegularExpression Id. */
  int FORTRAN = 102;
  /** RegularExpression Id. */
  int MAIN = 103;
  /** RegularExpression Id. */
  int NOEXECOPS = 104;
  /** RegularExpression Id. */
  int NOCHARGRAPHIC = 105;
  /** RegularExpression Id. */
  int CHARGRAPHIC = 106;
  /** RegularExpression Id. */
  int NOCMPAT = 107;
  /** RegularExpression Id. */
  int CMPAT = 108;
  /** RegularExpression Id. */
  int DESCRIPTOR = 109;
  /** RegularExpression Id. */
  int NODESCRIPTOR = 110;
  /** RegularExpression Id. */
  int FORMALIEN = 111;
  /** RegularExpression Id. */
  int LINKAGE = 112;
  /** RegularExpression Id. */
  int NOINLINE = 113;
  /** RegularExpression Id. */
  int INLINE = 114;
  /** RegularExpression Id. */
  int ORDER = 115;
  /** RegularExpression Id. */
  int REORDER = 116;
  /** RegularExpression Id. */
  int IRREDUCIBLE = 117;
  /** RegularExpression Id. */
  int REDUCABLE = 118;
  /** RegularExpression Id. */
  int REETRANT = 119;
  /** RegularExpression Id. */
  int RETCODE = 120;
  /** RegularExpression Id. */
  int WINMAIN = 121;
  /** RegularExpression Id. */
  int RECURSIVE = 122;
  /** RegularExpression Id. */
  int CALL = 123;
  /** RegularExpression Id. */
  int RETURN = 124;
  /** RegularExpression Id. */
  int GOTO = 125;
  /** RegularExpression Id. */
  int STOP = 126;
  /** RegularExpression Id. */
  int EXIT = 127;
  /** RegularExpression Id. */
  int SET = 128;
  /** RegularExpression Id. */
  int TITLE = 129;
  /** RegularExpression Id. */
  int FETCH = 130;
  /** RegularExpression Id. */
  int RELEASE = 131;
  /** RegularExpression Id. */
  int RESERVES = 132;
  /** RegularExpression Id. */
  int PACKAGE = 133;
  /** RegularExpression Id. */
  int EXPORTS = 134;
  /** RegularExpression Id. */
  int BEGIN = 135;
  /** RegularExpression Id. */
  int IF = 136;
  /** RegularExpression Id. */
  int ELSE = 137;
  /** RegularExpression Id. */
  int THEN = 138;
  /** RegularExpression Id. */
  int TO = 139;
  /** RegularExpression Id. */
  int BY = 140;
  /** RegularExpression Id. */
  int REPEAT = 141;
  /** RegularExpression Id. */
  int UPTHRU = 142;
  /** RegularExpression Id. */
  int DOWNTHRU = 143;
  /** RegularExpression Id. */
  int DO = 144;
  /** RegularExpression Id. */
  int LOOP = 145;
  /** RegularExpression Id. */
  int WHILE = 146;
  /** RegularExpression Id. */
  int UNTIL = 147;
  /** RegularExpression Id. */
  int DISPLAY = 148;
  /** RegularExpression Id. */
  int REPLY = 149;
  /** RegularExpression Id. */
  int READ = 150;
  /** RegularExpression Id. */
  int INTO = 151;
  /** RegularExpression Id. */
  int FROM = 152;
  /** RegularExpression Id. */
  int WRITE = 153;
  /** RegularExpression Id. */
  int MINUSCHAR = 154;
  /** RegularExpression Id. */
  int DIVIDE = 155;
  /** RegularExpression Id. */
  int MULTIPLY = 156;
  /** RegularExpression Id. */
  int GT = 157;
  /** RegularExpression Id. */
  int LT = 158;
  /** RegularExpression Id. */
  int PLUS = 159;
  /** RegularExpression Id. */
  int COMPLT = 160;
  /** RegularExpression Id. */
  int LTEQ = 161;
  /** RegularExpression Id. */
  int GTEQ = 162;
  /** RegularExpression Id. */
  int EQ = 163;
  /** RegularExpression Id. */
  int COMPEQ = 164;
  /** RegularExpression Id. */
  int COMPGT = 165;
  /** RegularExpression Id. */
  int AND = 166;
  /** RegularExpression Id. */
  int OR = 167;
  /** RegularExpression Id. */
  int COMMA_SEPARATOR = 168;
  /** RegularExpression Id. */
  int PICSTRING = 169;
  /** RegularExpression Id. */
  int INTEGER = 170;
  /** RegularExpression Id. */
  int STRING = 171;
  /** RegularExpression Id. */
  int PL1_WORD = 172;
  /** RegularExpression Id. */
  int EOL = 173;
  /** RegularExpression Id. */
  int SCOPE = 174;
  /** RegularExpression Id. */
  int PREPROC_COMMENT = 175;
  /** RegularExpression Id. */
  int SPACE_SEPARATOR = 178;
  /** RegularExpression Id. */
  int SPACECHAR = 179;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"DCL\"",
    "\"DECLARE\"",
    "\"PROCEDURE\"",
    "\"PROC\"",
    "\"DECIMAL\"",
    "\"BINARY\"",
    "\"DEC\"",
    "\"BIN\"",
    "\"FIXED\"",
    "\"FLOAT\"",
    "\"CHARACTER\"",
    "\"CHAR\"",
    "\"STATIC\"",
    "\"INIT\"",
    "\"PTR\"",
    "\"REAL\"",
    "\"VARYING\"",
    "\"PIC\"",
    "\"PICTURE\"",
    "\"COMPLEX\"",
    "\"UNSIGNED\"",
    "\"SIGNED\"",
    "\"AREA\"",
    "\"DIMENSION\"",
    "\"ENTRY\"",
    "\"FILE\"",
    "\"FORMAT\"",
    "\"GRAPHIC\"",
    "\"HANDLE\"",
    "\"LABEL\"",
    "\"LOCATES\"",
    "\"NONVARYING\"",
    "\"OFFSET\"",
    "\"ORDINAL\"",
    "\"POINTER\"",
    "\"PRECISION\"",
    "\"RETURNS\"",
    "\"STRUCTURE\"",
    "\"TASK\"",
    "\"TYPE\"",
    "\"UNION\"",
    "\"VARYING4\"",
    "\"VARYINGZ\"",
    "\"WIDECHAR\"",
    "\"WIDEPIC\"",
    "\"ABNORMAL\"",
    "\"ALIGNED\"",
    "\"ASSIGNABLE\"",
    "\"AUTOMATIC\"",
    "\"BASED\"",
    "\"BIGENDIAN\"",
    "\"BUFFERED\"",
    "\"BUILTIN\"",
    "\"BYADDR\"",
    "\"BYVALUE\"",
    "\"CONDITION\"",
    "\"CONNECTED\"",
    "\"CONTROLLED\"",
    "\"DEFINED\"",
    "\"DIMACROSS\"",
    "\"DIRECT\"",
    "\"ENVIRONMENT\"",
    "\"EXCLUSIVE\"",
    "\"EXTERNAL\"",
    "\"GENERIC\"",
    "\"HEXADEC\"",
    "\"IEEE\"",
    "\"INDFOR\"",
    "\"INITIAL\"",
    "\"INONLY\"",
    "\"INOUT\"",
    "\"INPUT\"",
    "\"INTERMAL\"",
    "\"KEYED\"",
    "\"LIKE\"",
    "\"LIST\"",
    "\"LITTLEENDIAN\"",
    "\"NONASSIGNABLE\"",
    "\"NONCONNECTED\"",
    "\"NORMAL\"",
    "\"OPTIONAL\"",
    "\"OPTIONS\"",
    "\"OUTONLY\"",
    "\"OUTPUT\"",
    "\"PARAMETER\"",
    "\"POSITION\"",
    "\"PRINT\"",
    "\"RECORD\"",
    "\"SEQUENTIAL\"",
    "\"STREAM\"",
    "\"UNALIGNED\"",
    "\"UNBUFFERED\"",
    "\"UPDATE\"",
    "\"VALUE\"",
    "\"VARIABLE\"",
    "\"XMLATTR\"",
    "\"XMLOMIT\"",
    "\"END\"",
    "\"BIT\"",
    "\"ASSEMBLER\"",
    "\"COBOL\"",
    "\"FORTRAN\"",
    "\"MAIN\"",
    "\"NOEXECOPS\"",
    "\"NONCHARGRAPHIC\"",
    "\"CHARGRAPHIC\"",
    "\"NOCMPAT\"",
    "\"CMPAT\"",
    "\"DESCRIPTOR\"",
    "\"NODESCRIPTOR\"",
    "\"FORMALIEN\"",
    "\"LINKAGE\"",
    "\"NOINLINE\"",
    "\"INLINE\"",
    "\"ORDER\"",
    "\"REORDER\"",
    "\"IRREDUCIBLE\"",
    "\"REDUCABLE\"",
    "\"REETRANT\"",
    "\"RETCODE\"",
    "\"WINMAIN\"",
    "\"RECURSIVE\"",
    "\"CALL\"",
    "\"RETURN\"",
    "\"GO TO\"",
    "\"STOP\"",
    "\"EXIT\"",
    "\"SET\"",
    "\"TITLE\"",
    "\"FETCH\"",
    "\"RELEASE\"",
    "\"RESERVES\"",
    "\"PACKAGE\"",
    "\"EXPORTS\"",
    "\"BEGIN\"",
    "\"IF\"",
    "\"ELSE\"",
    "\"THEN\"",
    "\"TO\"",
    "\"BY\"",
    "\"REPEAT\"",
    "\"UPTHRU\"",
    "\"DOWNTHRU\"",
    "\"DO\"",
    "\"LOOP\"",
    "\"WHILE\"",
    "\"UNTIL\"",
    "\"DISPLAY\"",
    "\"REPLY\"",
    "\"READ\"",
    "\"INTO\"",
    "\"FROM\"",
    "\"WRITE\"",
    "\"-\"",
    "\"/\"",
    "\"*\"",
    "\">\"",
    "\"<\"",
    "\"+\"",
    "<COMPLT>",
    "<LTEQ>",
    "<GTEQ>",
    "\"=\"",
    "\"\\u00ef\\u00bf\\u00bd=\"",
    "<COMPGT>",
    "\"&\"",
    "\"||\"",
    "\",\"",
    "<PICSTRING>",
    "<INTEGER>",
    "<STRING>",
    "<PL1_WORD>",
    "\"\\n\"",
    "<SCOPE>",
    "<PREPROC_COMMENT>",
    "<token of kind 176>",
    "\";\"",
    "<SPACE_SEPARATOR>",
    "<SPACECHAR>",
    "\":\"",
    "\"(\"",
    "\")\"",
    "\".\"",
    "\"\\\'\"",
  };

}
