/* Pl1ParserTokenManager.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. Pl1ParserTokenManager.java */
package org.bachelor.transpiler.pl1transpiler.parser;
import java.util.ArrayList;
import java.util.HashMap;
import org.bachelor.transpiler.pl1transpiler.symboltable.*;

/** Token Manager. */
@SuppressWarnings ("unused")
public class Pl1ParserTokenManager implements Pl1ParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      case 0:
         if ((active0 & 0xc0fc004002402140L) != 0L || (active1 & 0xc000000f06000401L) != 0L || (active2 & 0x12c1L) != 0L)
         {
            jjmatchedKind = 167;
            return 39;
         }
         if ((active0 & 0x38000000010000a6L) != 0L || (active1 & 0x200000000000L) != 0L || (active2 & 0x118000L) != 0L)
         {
            jjmatchedKind = 172;
            return 7;
         }
         if ((active2 & 0x8000000L) != 0L)
            return 3;
         if ((active0 & 0x700000000101800L) != 0L || (active1 & 0x800142000000000L) != 0L)
         {
            jjmatchedKind = 172;
            return 5;
         }
         if ((active0 & 0x3c00000800000L) != 0L || (active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 167;
            return 40;
         }
         if ((active0 & 0x33bffc2dc618L) != 0L || (active1 & 0x37ffcbc039fffbfeL) != 0L || (active2 & 0xee6d3eL) != 0L)
         {
            jjmatchedKind = 172;
            return 41;
         }
         if ((active2 & 0x2000000L) != 0L)
            return 22;
         if ((active2 & 0x4021000000L) != 0L)
            return 42;
         if ((active2 & 0x200000000000L) != 0L)
            return 43;
         if ((active2 & 0x4000000L) != 0L)
            return 19;
         if ((active2 & 0x100000000000000L) != 0L)
            return 44;
         if ((active0 & 0xc0000020000L) != 0L || (active1 & 0xc0000000L) != 0L)
         {
            jjmatchedKind = 167;
            return 45;
         }
         if ((active2 & 0x400000000L) != 0L)
            return 35;
         if ((active2 & 0x10000000L) != 0L)
            return 1;
         return -1;
      case 1:
         if ((active0 & 0x7f3ab3fffffdfffeL) != 0L || (active1 & 0x7fffffef3dfffbfeL) != 0L || (active2 & 0xfe663eL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 172;
               jjmatchedPos = 1;
            }
            return 41;
         }
         if ((active0 & 0x80054c0000020000L) != 0L || (active1 & 0x80000010c2000401L) != 0L || (active2 & 0xc1L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 167;
               jjmatchedPos = 1;
            }
            return 39;
         }
         if ((active0 & 0xc0000000000000L) != 0L || (active2 & 0x19900L) != 0L)
            return 41;
         return -1;
      case 2:
         if ((active0 & 0x7ffafffffff37e18L) != 0L || (active1 & 0xdfffffe3ffffffffL) != 0L || (active2 & 0xfee6feL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 172;
               jjmatchedPos = 2;
            }
            return 41;
         }
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 172;
               jjmatchedPos = 2;
            }
            return 5;
         }
         if ((active0 & 0x5000000000000L) != 0L || (active1 & 0x1000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 167;
               jjmatchedPos = 2;
            }
            return 39;
         }
         if ((active1 & 0x2000000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 172;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0xc81e6L) != 0L || (active1 & 0xc00000000L) != 0L || (active2 & 0x1L) != 0L)
            return 41;
         return -1;
      case 3:
         if ((active0 & 0x4000000000000L) != 0L || (active1 & 0x1000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 167;
               jjmatchedPos = 3;
            }
            return 39;
         }
         if ((active1 & 0x2000000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 172;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0xfffbfe7ffb7a2664L) != 0L || (active1 & 0x17fffb63ffffe7d7L) != 0L || (active2 & 0x3ce0feL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 172;
               jjmatchedPos = 3;
            }
            return 41;
         }
         if ((active0 & 0x18004815818L) != 0L || (active1 & 0xc800048000001828L) != 0L || (active2 & 0xc20600L) != 0L)
            return 41;
         return -1;
      case 4:
         if ((active0 & 0xfffbfc7fb97a286cL) != 0L || (active1 & 0x17f7ef53bf7fe277L) != 0L || (active2 & 0x10e078L) != 0L)
         {
            jjmatchedKind = 172;
            jjmatchedPos = 4;
            return 41;
         }
         if ((active1 & 0x2000000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 172;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x4000000000000L) != 0L)
            return 7;
         if ((active0 & 0x20042000600L) != 0L || (active1 & 0x8102040800580L) != 0L || (active2 & 0x2c0086L) != 0L)
            return 41;
         return -1;
      case 5:
         if ((active0 & 0xdfbbfc5d913a082cL) != 0L || (active1 & 0x7f3ef539a6ee227L) != 0L || (active2 & 0x108078L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 172;
               jjmatchedPos = 5;
            }
            return 41;
         }
         if ((active0 & 0x2040002228402040L) != 0L || (active1 & 0x1004000025110050L) != 0L || (active2 & 0x6000L) != 0L)
            return 41;
         return -1;
      case 6:
         if ((active0 & 0xd71b505101200808L) != 0L || (active1 & 0x4e2e7109a62e201L) != 0L || (active2 & 0x8010L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 172;
               jjmatchedPos = 6;
            }
            return 41;
         }
         if ((active0 & 0x8a0ac2c901a0024L) != 0L || (active1 & 0x3110843000c0026L) != 0L || (active2 & 0x100068L) != 0L)
            return 41;
         return -1;
      case 7:
         if ((active0 & 0xd70b005101000808L) != 0L || (active1 & 0x460e7101a20e000L) != 0L)
         {
            jjmatchedKind = 172;
            jjmatchedPos = 7;
            return 41;
         }
         if ((active0 & 0x105c0000200000L) != 0L || (active1 & 0x82000080420201L) != 0L || (active2 & 0x8010L) != 0L)
            return 41;
         return -1;
      case 8:
         if ((active0 & 0x4401000100000000L) != 0L || (active1 & 0x2066001200e000L) != 0L)
         {
            jjmatchedKind = 172;
            jjmatchedPos = 8;
            return 41;
         }
         if ((active0 & 0x930a005001000808L) != 0L || (active1 & 0x440811008200000L) != 0L)
            return 41;
         return -1;
      case 9:
         if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0x2046000000e000L) != 0L)
         {
            jjmatchedKind = 172;
            jjmatchedPos = 9;
            return 41;
         }
         if ((active0 & 0x401000100000000L) != 0L || (active1 & 0x200012000000L) != 0L)
            return 41;
         return -1;
      case 10:
         if ((active1 & 0x42000000e000L) != 0L)
         {
            jjmatchedKind = 172;
            jjmatchedPos = 10;
            return 41;
         }
         if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0x20040000000000L) != 0L)
            return 41;
         return -1;
      case 11:
         if ((active1 & 0x40000000a000L) != 0L)
            return 41;
         if ((active1 & 0x20000004000L) != 0L)
         {
            jjmatchedKind = 172;
            jjmatchedPos = 11;
            return 41;
         }
         return -1;
      case 12:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 172;
            jjmatchedPos = 12;
            return 41;
         }
         if ((active1 & 0x4000L) != 0L)
            return 41;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 10:
         return jjStartNfaWithStates_0(0, 173, 43);
      case 38:
         return jjStopAtPos(0, 164);
      case 39:
         return jjStartNfaWithStates_0(0, 184, 44);
      case 40:
         return jjStopAtPos(0, 181);
      case 41:
         return jjStopAtPos(0, 182);
      case 42:
         return jjStartNfaWithStates_0(0, 154, 19);
      case 43:
         return jjStartNfaWithStates_0(0, 157, 42);
      case 44:
         return jjStartNfaWithStates_0(0, 166, 42);
      case 45:
         return jjStartNfaWithStates_0(0, 152, 42);
      case 46:
         return jjStopAtPos(0, 183);
      case 47:
         return jjStartNfaWithStates_0(0, 153, 22);
      case 58:
         return jjStopAtPos(0, 180);
      case 60:
         return jjStartNfaWithStates_0(0, 156, 1);
      case 61:
         return jjStopAtPos(0, 161);
      case 62:
         return jjStartNfaWithStates_0(0, 155, 3);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x3c00000800000L, 0x1000000000L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0xfc000000000140L, 0x800000000L, 0x1080L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x700000000101800L, 0x800142000000000L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x38000000010000a6L, 0x200000000000L, 0x118000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0xc000000002000000L, 0x8000000400000001L, 0x240L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0xc000600L, 0x804000000000L, 0x4L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x2000000000000002L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x20000000L, 0x4L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x4000L, 0x240000000003f8L, 0x800100L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0xc0000000L, 0x1000000003800L, 0x20000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x100000000L, 0x24b000001c000L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x600000000L, 0x80000001e0000L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x18000c8018L, 0xe00000L, 0x20L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x2000010000L, 0x15d0000001000000L, 0x602018L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x4000402000L, 0x4000000006000000L, 0x1L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x18000000000L, 0x0L, 0xc02L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x20000200000L, 0x38000000L, 0x84000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0xc0000020000L, 0xc0000000L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x300000000000L, 0x200000000000000L, 0x40000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x300000000L, 0x0L);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2000000000L);
      case 172:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x400000000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active2 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 162);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x40c8060020000L, active1, 0x8000080c0200000L, active2, 0x20L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L, active1, 0L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x2L, active1, 0L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000020000100a4L, active1, 0x15d020000300040eL, active2, 0x60209dL);
      case 70:
      case 102:
         if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(1, 136, 41);
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000L, active1, 0L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x1800L, active1, 0x40000000000L, active2, 0x40400L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x30083000054c0340L, active1, 0x201000800003800L, active2, 0x100002L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000400L, active1, 0L, active2, 0x200L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100300000000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000020002204000L, active1, 0x40004180003f0L, active2, 0x880000L);
      case 79:
      case 111:
         if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(1, 139, 41);
         else if ((active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x700000988100000L, active1, 0x2002cb600041c000L, active2, 0x28000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20060000L, active2, 0x4000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x1410800018L, active1, 0x28000000800000L, active2, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000L, active1, 0x1000000000L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000a000L, active1, 0x4000000004000000L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x32000000000000L, active1, 0x180000L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0x8000000000000001L, active2, 0x40L);
      case 89:
      case 121:
         if ((active2 & 0x1000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xc0010000000000L, active1, 0L, active2, 0L);
      case 124:
         if ((active2 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 165);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000000000000L, active2, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000010013800L, active1, 0x40008000000L, active2, 0x400000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L, active1, 0x2010000000L, active2, 0L);
      case 67:
      case 99:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000080080024L, active1, 0x400080001000000L, active2, 0x20L);
      case 68:
      case 100:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 98, 41);
         return jjMoveStringLiteralDfa3_0(active0, 0x300400000000L, active1, 0x48400020000010L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000800000L, active1, 0x80010000000008L, active2, 0x400L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x810000200000000L, active1, 0L, active2, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000400000L, active1, 0L, active2, 0x80L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x20820800004000L, active1, 0x8002008000800020L, active2, 0x40000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800L, active2, 0L);
      case 76:
      case 108:
         if ((active0 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(2, 1, 41);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L, active1, 0x804000340000000L, active2, 0x8L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000001100000L, active1, 0L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x700400120000040L, active1, 0x20102000000c002L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x418L, active1, 0x40100000000000c0L, active2, 0x20000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0x100000000100L, active2, 0x202040L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 15, 41);
         return jjMoveStringLiteralDfa3_0(active0, 0x20000c4008020000L, active1, 0x20804084210000L, active2, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x5008000200000L, active1, 0x201000401000L, active2, 0x100210L);
      case 84:
      case 116:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 99, 41);
         else if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(2, 128, 41);
         return jjMoveStringLiteralDfa3_0(active0, 0x2002002000000L, active1, 0x11000000001e2201L, active2, 0x884006L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x4080000000000000L, active1, 0L, active2, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x8000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L, active1, 0x4L, active2, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 41);
         return jjMoveStringLiteralDfa4_0(active0, 0x1080000080000440L, active1, 0x100120204004L, active2, 0L);
      case 67:
      case 99:
         if ((active0 & 0x10L) != 0L)
         {
            jjmatchedKind = 4;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000008L, active1, 0x100220000008000L, active2, 0x4L);
      case 68:
      case 100:
         if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 150, 41);
         return jjMoveStringLiteralDfa4_0(active0, 0x140000020000000L, active1, 0L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 41);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 40, 41);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 67, 41);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 75, 41);
         else if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 137, 41);
         return jjMoveStringLiteralDfa4_0(active0, 0x200c300041000200L, active1, 0x28401004000603L, active2, 0x2018L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L, active1, 0x10L, active2, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L, active1, 0L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x4000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x4801000400200020L, active1, 0x4000080460000L, active2, 0x80080L);
      case 75:
      case 107:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 41);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000000000L, active2, 0x20L);
      case 76:
      case 108:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 16, 41);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 123, 41);
         return jjMoveStringLiteralDfa4_0(active0, 0x8020000000000004L, active1, 0x8000000L, active2, 0x240002L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L, active1, 0x200880000010000L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 103, 41);
         else if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 138, 41);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000800400000L, active1, 0x2000000800040L, active2, 0x8000L);
      case 79:
      case 111:
         if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 151, 41);
         return jjMoveStringLiteralDfa4_0(active0, 0x2420000000000L, active1, 0x2201080000L, active2, 0x40L);
      case 80:
      case 112:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 126, 41);
         else if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 145, 41);
         return jjMoveStringLiteralDfa4_0(active0, 0x10100000L, active1, 0x100000L, active2, 0x100000L);
      case 82:
      case 114:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x2000800L, active1, 0x10040000000000L, active2, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L, active1, 0L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 76, 41);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 127, 41);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000082000L, active1, 0x2080004000002020L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x6000000000L, active1, 0x1440000052000180L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L, active1, 0L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000000000L, active2, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa4_0(active0, 0xc0000020000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x108000804L, active1, 0x201800084010000L, active2, 0x2028L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x3000104000000000L, active1, 0x40000000000000L, active2, 0L);
      case 68:
      case 100:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 9, 41);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 50, 7);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 74, 41);
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000000L, active1, 0x30000000000004L, active2, 0L);
      case 69:
      case 101:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 94, 41);
         else if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 129, 41);
         else if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 146, 41);
         return jjMoveStringLiteralDfa5_0(active0, 0x210000200400008L, active1, 0x10002000000L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000000L, active2, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000200000L, active1, 0x40000000000L, active2, 0L);
      case 72:
      case 104:
         if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(4, 130, 41);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L, active1, 0x20000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000c1000022000L, active1, 0x8000020L, active2, 0L);
      case 76:
      case 108:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 41);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 101, 41);
         else if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 147, 41);
         return jjMoveStringLiteralDfa5_0(active0, 0x80000020100000L, active1, 0x2000000002040L, active2, 0x100000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000020L, active1, 0x1200200000L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 41, 41);
         else if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 135, 41);
         return jjMoveStringLiteralDfa5_0(active0, 0x808800401000000L, active1, 0x4000000080000L, active2, 0L);
      case 79:
      case 111:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(4, 125);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000000068010L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000L, active1, 0x80000000000L, active2, 0L);
      case 82:
      case 114:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 115, 41);
         return jjMoveStringLiteralDfa5_0(active0, 0x4400402000000040L, active1, 0x1480204001000203L, active2, 0x4050L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000004000L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 10, 41);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 71, 41);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 72, 41);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 87, 41);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 108, 41);
         return jjMoveStringLiteralDfa5_0(active0, 0x20000880000000L, active1, 0x120400000L, active2, 0x8000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000080000L, active1, 0x100000L, active2, 0L);
      case 89:
      case 121:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 25, 41);
         else if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 149, 41);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000400000020L, active1, 0xc00a4000000020L, active2, 0x100000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1080000000L, active2, 0L);
      case 67:
      case 99:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 13, 41);
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000800L, active1, 0x410000000000L, active2, 0L);
      case 68:
      case 100:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 41);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 88, 41);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000008L, active1, 0x100000000000000L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 29, 41);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 93, 41);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 114, 41);
         return jjMoveStringLiteralDfa6_0(active0, 0x800800880100000L, active1, 0x10000000202004L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000000L, active2, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000008000000L, active2, 0x20L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L, active1, 0L, active2, 0x8000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x20200010000000L, active1, 0x202200200400002L, active2, 0L);
      case 76:
      case 108:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 80, 41);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800000080000L, active2, 0L);
      case 77:
      case 109:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 90, 41);
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L, active1, 0x200L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x10c2000220000L, active1, 0x2068001L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x4400000000000000L, active1, 0L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 54, 41);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 68, 41);
         return jjMoveStringLiteralDfa6_0(active0, 0x1010000100080004L, active1, 0x40000000000L, active2, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000001001000000L, active1, 0x400000000004000L, active2, 0x8L);
      case 84:
      case 116:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 27, 41);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 33, 41);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 61, 41);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 84, 41);
         else if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 141, 41);
         return jjMoveStringLiteralDfa6_0(active0, 0x100004000000000L, active1, 0x100000000L, active2, 0x40L);
      case 85:
      case 117:
         if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 142, 41);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000000L, active1, 0x20000000000000L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x10L);
      case 89:
      case 121:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 6, 41);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 70, 41);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2);
      return 6;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x1500000000000L, active1, 0x40000020201L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000000000000L, active2, 0L);
      case 67:
      case 99:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(6, 28, 41);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 45, 41);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(6, 65, 41);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 66, 41);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000000000000L, active2, 0L);
      case 68:
      case 100:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 47, 41);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 59, 41);
         break;
      case 69:
      case 101:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 2, 41);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 19, 41);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 55, 41);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 112, 41);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 120, 41);
         else if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(6, 131, 41);
         else if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(6, 133, 41);
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000200000L, active1, 0x10002000L, active2, 0x10L);
      case 71:
      case 103:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0xc0000000000L, active1, 0L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x8108001001000000L, active1, 0x400800000004000L, active2, 0L);
      case 76:
      case 108:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(6, 5, 41);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 34, 41);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(6, 69, 41);
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000000L, active1, 0x1080000000L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 53, 41);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 102, 41);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 121, 41);
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L, active1, 0x82000008008000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000000L, active1, 0x10000400000L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 35, 41);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(6, 96, 41);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 116, 41);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x420000000000L, active2, 0x8000L);
      case 83:
      case 115:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 31, 41);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 37, 41);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 82, 41);
         else if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(6, 134, 41);
         break;
      case 84:
      case 116:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 97, 41);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 107, 41);
         return jjMoveStringLiteralDfa7_0(active0, 0x202000000000800L, active1, 0x2200000L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000008L, active1, 0L, active2, 0L);
      case 88:
      case 120:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 20, 41);
         break;
      case 89:
      case 121:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 83, 41);
         else if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 148, 41);
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2);
      return 7;
   }
   switch(curChar)
   {
      case 52:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 42, 41);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000L, active1, 0L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000L, active1, 0L, active2, 0L);
      case 68:
      case 100:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(7, 21, 41);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 52, 41);
         break;
      case 69:
      case 101:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(7, 95, 41);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 113, 41);
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000800L, active1, 0x801008208000L, active2, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20000004000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000100000000L, active1, 0x20400002000000L, active2, 0L);
      case 76:
      case 108:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 46, 41);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(7, 64, 41);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(7, 73, 41);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 81, 41);
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000000L, active1, 0x40000000000000L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000000000L, active1, 0L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(7, 86, 41);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x100001001000000L, active1, 0L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x50000000000L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 44, 41);
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000008L, active1, 0x10000000L, active2, 0L);
      case 83:
      case 115:
         if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(7, 132, 41);
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000000L, active1, 0L, active2, 0L);
      case 84:
      case 116:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 119, 41);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 85:
      case 117:
         if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(7, 143, 41);
         break;
      case 86:
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000000L, active1, 0x400000000000000L, active2, 0L);
      case 90:
      case 122:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 43, 41);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000000000000L);
      case 67:
      case 99:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 49, 41);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8000L);
      case 68:
      case 100:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 57, 41);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(8, 91, 41);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000L);
      case 69:
      case 101:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(8, 3, 41);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 38, 41);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 63, 41);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 118, 41);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 122, 41);
         return jjMoveStringLiteralDfa9_0(active0, 0x4400000000000000L, active1, 0x10000000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(8, 24, 41);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 36, 41);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 51, 41);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 56, 41);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 111, 41);
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000L, active1, 0x4000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200000000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x400000000000L);
      case 82:
      case 114:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(8, 11, 41);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(8, 85, 41);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 100, 41);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000000000L);
      case 83:
      case 115:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 60, 41);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 104, 41);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x20000004000L);
      case 68:
      case 100:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 58, 41);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(9, 92, 41);
         break;
      case 69:
      case 101:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 48, 41);
         break;
      case 71:
      case 103:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(9, 32, 41);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x40000002000L);
      case 76:
      case 108:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(9, 89, 41);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x20000000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 109, 41);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x400000008000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x4000L);
      case 67:
      case 99:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 106, 41);
         break;
      case 69:
      case 101:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 117, 41);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x8000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x400000000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x20000000000L);
      case 84:
      case 116:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 62, 41);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, 0L, active1, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(11, 79, 41);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa12_0(active1, 0x20000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa12_0(active1, 0x4000L);
      case 78:
      case 110:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(11, 77, 41);
         break;
      case 82:
      case 114:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 110, 41);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(10, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, 0L, active1, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(12, 78, 41);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa13_0(active1, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(11, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, active1, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 105, 41);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, active1, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0x100000000000L, 0x0L
};
static final long[] jjbitVec1 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 39;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 35:
                  if (curChar == 62)
                  {
                     if (kind > 163)
                        kind = 163;
                  }
                  else if (curChar == 60)
                  {
                     if (kind > 158)
                        kind = 158;
                  }
                  break;
               case 19:
               case 4:
                  if ((0x5200bc1000000000L & l) == 0L)
                     break;
                  if (kind > 167)
                     kind = 167;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 172)
                        kind = 172;
                     { jjCheckNAddTwoStates(15, 16); }
                  }
                  else if (curChar == 45)
                     { jjCheckNAddTwoStates(16, 17); }
                  if ((0x5200bc1000000000L & l) != 0L)
                  {
                     if (kind > 167)
                        kind = 167;
                     { jjCheckNAddStates(0, 2); }
                  }
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 172)
                        kind = 172;
                     { jjCheckNAddTwoStates(15, 16); }
                  }
                  else if (curChar == 45)
                     { jjCheckNAddTwoStates(16, 17); }
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 172)
                        kind = 172;
                     { jjCheckNAddTwoStates(15, 16); }
                  }
                  else if (curChar == 45)
                     { jjCheckNAddTwoStates(16, 17); }
                  break;
               case 3:
                  if ((0x5200bc1000000000L & l) != 0L)
                  {
                     if (kind > 167)
                        kind = 167;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 61)
                  {
                     if (kind > 160)
                        kind = 160;
                  }
                  break;
               case 43:
                  if ((0x100003200L & l) != 0L)
                  {
                     if (kind > 178)
                        kind = 178;
                     { jjCheckNAddTwoStates(33, 32); }
                  }
                  else if (curChar == 10)
                  {
                     if (kind > 178)
                        kind = 178;
                     { jjCheckNAddTwoStates(33, 32); }
                  }
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 172)
                        kind = 172;
                     { jjCheckNAddTwoStates(15, 16); }
                  }
                  else if (curChar == 45)
                     { jjCheckNAddTwoStates(16, 17); }
                  if ((0x5200bc1000000000L & l) != 0L)
                  {
                     if (kind > 167)
                        kind = 167;
                     { jjCheckNAddStates(0, 2); }
                  }
                  break;
               case 42:
                  if ((0x5200bc1000000000L & l) == 0L)
                     break;
                  if (kind > 167)
                     kind = 167;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 1:
                  if ((0x5200bc1000000000L & l) != 0L)
                  {
                     if (kind > 167)
                        kind = 167;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 61)
                  {
                     if (kind > 159)
                        kind = 159;
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 172)
                        kind = 172;
                     { jjCheckNAddTwoStates(15, 16); }
                  }
                  else if ((0x100003200L & l) != 0L)
                  {
                     if (kind > 178)
                        kind = 178;
                     { jjCheckNAddStates(3, 5); }
                  }
                  else if (curChar == 10)
                  {
                     if (kind > 178)
                        kind = 178;
                     { jjCheckNAddTwoStates(33, 32); }
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 22;
                  else if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 19;
                  else if (curChar == 39)
                     { jjCheckNAddTwoStates(13, 14); }
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 3;
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 1;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 170)
                        kind = 170;
                     { jjCheckNAdd(11); }
                  }
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 174)
                        kind = 174;
                  }
                  if ((0x5200bc1000000000L & l) != 0L)
                  {
                     if (kind > 167)
                        kind = 167;
                     { jjCheckNAddStates(0, 2); }
                  }
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 172)
                        kind = 172;
                     { jjCheckNAddTwoStates(15, 16); }
                  }
                  else if (curChar == 45)
                     { jjCheckNAddTwoStates(16, 17); }
                  if ((0x5200bc1000000000L & l) != 0L)
                  {
                     if (kind > 167)
                        kind = 167;
                     { jjCheckNAddStates(0, 2); }
                  }
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 172)
                        kind = 172;
                     { jjCheckNAddTwoStates(15, 16); }
                  }
                  else if (curChar == 45)
                     { jjCheckNAddTwoStates(16, 17); }
                  break;
               case 44:
                  if ((0x3ff000300000000L & l) != 0L)
                     { jjCheckNAddTwoStates(13, 14); }
                  else if (curChar == 39)
                  {
                     if (kind > 171)
                        kind = 171;
                  }
                  break;
               case 22:
                  if ((0x5200bc1000000000L & l) != 0L)
                  {
                     if (kind > 167)
                        kind = 167;
                     { jjCheckNAddStates(0, 2); }
                  }
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(23, 24); }
                  break;
               case 2:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 170)
                     kind = 170;
                  { jjCheckNAdd(11); }
                  break;
               case 12:
                  if (curChar == 39)
                     { jjCheckNAddTwoStates(13, 14); }
                  break;
               case 13:
                  if ((0x3ff000300000000L & l) != 0L)
                     { jjCheckNAddTwoStates(13, 14); }
                  break;
               case 14:
                  if (curChar == 39 && kind > 171)
                     kind = 171;
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 172)
                     kind = 172;
                  { jjCheckNAddTwoStates(15, 16); }
                  break;
               case 16:
                  if (curChar == 45)
                     { jjCheckNAddTwoStates(16, 17); }
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 172)
                     kind = 172;
                  { jjCheckNAddTwoStates(16, 17); }
                  break;
               case 18:
                  if ((0x3fe000000000000L & l) != 0L && kind > 174)
                     kind = 174;
                  break;
               case 20:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 175)
                     kind = 175;
                  jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 21:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 23:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(23, 24); }
                  break;
               case 24:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
                  if (curChar == 39)
                     { jjCheckNAddTwoStates(26, 27); }
                  break;
               case 26:
                  if ((0x3ff000300000000L & l) != 0L)
                     { jjCheckNAddTwoStates(26, 27); }
                  break;
               case 27:
                  if (curChar == 39)
                     { jjCheckNAddTwoStates(28, 30); }
                  break;
               case 28:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(28, 30); }
                  break;
               case 29:
                  if (curChar == 47 && kind > 176)
                     kind = 176;
                  break;
               case 30:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 32:
                  if (curChar != 10)
                     break;
                  if (kind > 178)
                     kind = 178;
                  { jjCheckNAddTwoStates(33, 32); }
                  break;
               case 33:
                  if ((0x100003200L & l) == 0L)
                     break;
                  if (kind > 178)
                     kind = 178;
                  { jjCheckNAddTwoStates(33, 32); }
                  break;
               case 36:
                  if (curChar == 62 && kind > 163)
                     kind = 163;
                  break;
               case 37:
                  if ((0x100003200L & l) == 0L)
                     break;
                  if (kind > 178)
                     kind = 178;
                  { jjCheckNAddStates(3, 5); }
                  break;
               case 38:
                  if ((0x100003200L & l) == 0L)
                     break;
                  if (kind > 179)
                     kind = 179;
                  { jjCheckNAdd(38); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 19:
                  if ((0x548082605480826L & l) != 0L)
                  {
                     if (kind > 167)
                        kind = 167;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  else if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  else if (curChar == 124)
                  {
                     if (kind > 175)
                        kind = 175;
                     { jjCheckNAdd(20); }
                  }
                  break;
               case 40:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 172)
                        kind = 172;
                     { jjCheckNAddTwoStates(15, 16); }
                  }
                  else if (curChar == 95)
                     { jjCheckNAddTwoStates(16, 17); }
                  if ((0x548082605480826L & l) != 0L)
                  {
                     if (kind > 167)
                        kind = 167;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  else if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  if ((0x200000002L & l) != 0L)
                  {
                     if (kind > 168)
                        kind = 168;
                     { jjCheckNAdd(9); }
                  }
                  break;
               case 7:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 172)
                        kind = 172;
                     { jjCheckNAddTwoStates(15, 16); }
                  }
                  else if (curChar == 95)
                     { jjCheckNAddTwoStates(16, 17); }
                  if ((0x400000004L & l) != 0L)
                  {
                     if (kind > 167)
                        kind = 167;
                     { jjCheckNAddStates(0, 2); }
                  }
                  break;
               case 5:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 172)
                        kind = 172;
                     { jjCheckNAddTwoStates(15, 16); }
                  }
                  else if (curChar == 95)
                     { jjCheckNAddTwoStates(16, 17); }
                  if ((0x4000000040000L & l) != 0L)
                  {
                     if (kind > 167)
                        kind = 167;
                     { jjCheckNAddStates(0, 2); }
                  }
                  break;
               case 3:
                  if ((0x548082605480826L & l) != 0L)
                  {
                     if (kind > 167)
                        kind = 167;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  else if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 39:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 172)
                        kind = 172;
                     { jjCheckNAddTwoStates(15, 16); }
                  }
                  else if (curChar == 95)
                     { jjCheckNAddTwoStates(16, 17); }
                  if ((0x548082605480826L & l) != 0L)
                  {
                     if (kind > 167)
                        kind = 167;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  else if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 42:
                  if ((0x548082605480826L & l) != 0L)
                  {
                     if (kind > 167)
                        kind = 167;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  else if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 1:
                  if ((0x548082605480826L & l) != 0L)
                  {
                     if (kind > 167)
                        kind = 167;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  else if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 172)
                        kind = 172;
                     { jjCheckNAddTwoStates(15, 16); }
                  }
                  if ((0x548082605480826L & l) != 0L)
                  {
                     if (kind > 167)
                        kind = 167;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  else if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  if ((0x40000000400000L & l) != 0L)
                  {
                     if (kind > 169)
                        kind = 169;
                     { jjCheckNAdd(10); }
                  }
                  else if ((0x200000002L & l) != 0L)
                  {
                     if (kind > 168)
                        kind = 168;
                     { jjCheckNAdd(9); }
                  }
                  break;
               case 45:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 172)
                        kind = 172;
                     { jjCheckNAddTwoStates(15, 16); }
                  }
                  else if (curChar == 95)
                     { jjCheckNAddTwoStates(16, 17); }
                  if ((0x548082605480826L & l) != 0L)
                  {
                     if (kind > 167)
                        kind = 167;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  else if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  if ((0x40000000400000L & l) != 0L)
                  {
                     if (kind > 169)
                        kind = 169;
                     { jjCheckNAdd(10); }
                  }
                  break;
               case 41:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 172)
                        kind = 172;
                     { jjCheckNAddTwoStates(15, 16); }
                  }
                  else if (curChar == 95)
                     { jjCheckNAddTwoStates(16, 17); }
                  break;
               case 44:
               case 13:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(13, 14); }
                  break;
               case 22:
                  if ((0x548082605480826L & l) != 0L)
                  {
                     if (kind > 167)
                        kind = 167;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  else if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 4:
                  if ((0x548082605480826L & l) == 0L)
                     break;
                  if (kind > 167)
                     kind = 167;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 6:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 8:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if ((0x200000002L & l) == 0L)
                     break;
                  if (kind > 168)
                     kind = 168;
                  { jjCheckNAdd(9); }
                  break;
               case 10:
                  if ((0x40000000400000L & l) == 0L)
                     break;
                  if (kind > 169)
                     kind = 169;
                  { jjCheckNAdd(10); }
                  break;
               case 15:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 172)
                     kind = 172;
                  { jjCheckNAddTwoStates(15, 16); }
                  break;
               case 16:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(16, 17); }
                  break;
               case 17:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 172)
                     kind = 172;
                  { jjCheckNAddTwoStates(16, 17); }
                  break;
               case 20:
                  if (kind > 175)
                     kind = 175;
                  { jjCheckNAdd(20); }
                  break;
               case 23:
                  { jjAddStates(6, 7); }
                  break;
               case 26:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjAddStates(8, 9); }
                  break;
               case 28:
                  { jjAddStates(10, 11); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 19:
               case 4:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 167)
                     kind = 167;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 40:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 167)
                     kind = 167;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 3:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 167)
                     kind = 167;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 39:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 167)
                     kind = 167;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 42:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 167)
                     kind = 167;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 167)
                     kind = 167;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 167)
                        kind = 167;
                     { jjCheckNAddStates(0, 2); }
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjAddStates(12, 13); }
                  break;
               case 45:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 167)
                     kind = 167;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 22:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 167)
                     kind = 167;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 20:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 175)
                     kind = 175;
                  jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 23:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(6, 7); }
                  break;
               case 28:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(10, 11); }
                  break;
               case 34:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjAddStates(12, 13); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 39 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, "\55", 
"\57", "\52", "\76", "\74", "\53", null, null, null, "\75", "\254\75", null, "\46", 
"\174\174", "\54", null, null, null, null, null, null, "\12", null, null, null, null, null, 
null, "\72", "\50", "\51", "\56", "\47", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   4, 6, 8, 33, 32, 38, 23, 24, 26, 27, 28, 30, 35, 36, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 32:
         return ((jjbitVec0[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec3[i2] & l2) != 0L);
      default :
         if ((jjbitVec1[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec0[i2] & l2) != 0L);
      default :
         return false;
   }
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 59 && (0x800000000000000L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public Pl1ParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public Pl1ParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 39; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x1f0ffffffffffffL, 
};
static final long[] jjtoSkip = {
   0x0L, 0x0L, 0xf000000000000L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0x0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[39];
    private final int[] jjstateSet = new int[2 * 39];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
